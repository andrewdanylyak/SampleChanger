
AAEC018.280.002_F.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000016f8  0000178c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000157  0080011c  0080011c  000017a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001500  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4a  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001495  00000000  00000000  00003b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000830  00000000  00000000  0000500c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bcc  00000000  00000000  0000583c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000103a  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__vector_3>
      10:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__vector_4>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__vector_7>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_14>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_24>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      68:	7f 03       	fmul	r23, r23
      6a:	72 02       	muls	r23, r18
      6c:	86 02       	muls	r24, r22
      6e:	9f 02       	muls	r25, r31
      70:	dc 02       	muls	r29, r28
      72:	e9 02       	muls	r30, r25
      74:	12 03       	mulsu	r17, r18
      76:	20 03       	mulsu	r18, r16
      78:	3c 03       	fmul	r19, r20

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d4 e0       	ldi	r29, 0x04	; 4
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e8 ef       	ldi	r30, 0xF8	; 248
      8e:	f6 e1       	ldi	r31, 0x16	; 22
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	ac 31       	cpi	r26, 0x1C	; 28
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	22 e0       	ldi	r18, 0x02	; 2
      9e:	ac e1       	ldi	r26, 0x1C	; 28
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a3 37       	cpi	r26, 0x73	; 115
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 46 0a 	call	0x148c	; 0x148c <main>
      b0:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <init_cell>:

 #include "includes.h"

 volatile tCellStructure CellStructure;

 void init_cell(){
      b8:	cf 93       	push	r28
      ba:	df 93       	push	r29
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
	CellStructure.state = CellOk;
      c0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <CellStructure>
	CellStructure.cell_motor_pwm = 0;
      c4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <CellStructure+0x1>
 }
      c8:	00 00       	nop
      ca:	df 91       	pop	r29
      cc:	cf 91       	pop	r28
      ce:	08 95       	ret

000000d0 <cell_update_control_values>:

 void cell_update_control_values(bool park, uint8_t motor_pwm){
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	00 d0       	rcall	.+0      	; 0xd6 <cell_update_control_values+0x6>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	89 83       	std	Y+1, r24	; 0x01
      dc:	6a 83       	std	Y+2, r22	; 0x02
	if(park){
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	88 23       	and	r24, r24
      e2:	79 f0       	breq	.+30     	; 0x102 <cell_update_control_values+0x32>
		CellStructure.state = CellPark;
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <CellStructure>
		CellStructure.cell_motor_pwm = 0;
      ea:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <CellStructure+0x1>
		PORTD |= (1 << PD7);														//brake pin
      ee:	8b e2       	ldi	r24, 0x2B	; 43
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2b e2       	ldi	r18, 0x2B	; 43
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	20 68       	ori	r18, 0x80	; 128
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
		CellStructure.cell_motor_pwm = motor_pwm;
		CellStructure.state = CellRotate;
		PORTD &= ~(1 << PD7);														//brake pin
		PORTB |= (1 << PB0);														//direction pin
	}
}
     100:	18 c0       	rjmp	.+48     	; 0x132 <cell_update_control_values+0x62>
		CellStructure.state = CellPark;
		CellStructure.cell_motor_pwm = 0;
		PORTD |= (1 << PD7);														//brake pin
	}
	else{
		CellStructure.cell_motor_pwm = motor_pwm;
     102:	8a 81       	ldd	r24, Y+2	; 0x02
     104:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <CellStructure+0x1>
		CellStructure.state = CellRotate;
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <CellStructure>
		PORTD &= ~(1 << PD7);														//brake pin
     10e:	8b e2       	ldi	r24, 0x2B	; 43
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	2b e2       	ldi	r18, 0x2B	; 43
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	f9 01       	movw	r30, r18
     118:	20 81       	ld	r18, Z
     11a:	2f 77       	andi	r18, 0x7F	; 127
     11c:	fc 01       	movw	r30, r24
     11e:	20 83       	st	Z, r18
		PORTB |= (1 << PB0);														//direction pin
     120:	85 e2       	ldi	r24, 0x25	; 37
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	25 e2       	ldi	r18, 0x25	; 37
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	f9 01       	movw	r30, r18
     12a:	20 81       	ld	r18, Z
     12c:	21 60       	ori	r18, 0x01	; 1
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
	}
}
     132:	00 00       	nop
     134:	0f 90       	pop	r0
     136:	0f 90       	pop	r0
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <get_cell_state>:

 tCellState get_cell_state(){
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
	return CellStructure.state;
     146:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <CellStructure>
}
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <cell_isr_routine>:

 void cell_isr_routine(){
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
 static uint8_t cell_pwm_counter = 0;
 static tSoftPwmState cell_pwm_state = 0;
 switch(cell_pwm_state){
     158:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     15c:	88 2f       	mov	r24, r24
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	91 05       	cpc	r25, r1
     164:	a1 f1       	breq	.+104    	; 0x1ce <cell_isr_routine+0x7e>
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	91 05       	cpc	r25, r1
     16a:	09 f4       	brne	.+2      	; 0x16e <cell_isr_routine+0x1e>
     16c:	4f c0       	rjmp	.+158    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
     16e:	89 2b       	or	r24, r25
     170:	09 f0       	breq	.+2      	; 0x174 <cell_isr_routine+0x24>
     172:	59 c0       	rjmp	.+178    	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		 case pwmSetUpdate:
			 if(CellStructure.cell_motor_pwm == 0){
     174:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <CellStructure+0x1>
     178:	88 23       	and	r24, r24
     17a:	51 f4       	brne	.+20     	; 0x190 <cell_isr_routine+0x40>
				 PORTD &= ~(1 << PD5);											//cell motor pin
     17c:	8b e2       	ldi	r24, 0x2B	; 43
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	2b e2       	ldi	r18, 0x2B	; 43
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	f9 01       	movw	r30, r18
     186:	20 81       	ld	r18, Z
     188:	2f 7d       	andi	r18, 0xDF	; 223
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
				 return;
     18e:	4b c0       	rjmp	.+150    	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
			 }
			 if(CellStructure.cell_motor_pwm>= 100){
     190:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <CellStructure+0x1>
     194:	84 36       	cpi	r24, 0x64	; 100
     196:	50 f0       	brcs	.+20     	; 0x1ac <cell_isr_routine+0x5c>
				 PORTD |= (1 << PD5);												//cell motor pin
     198:	8b e2       	ldi	r24, 0x2B	; 43
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2b e2       	ldi	r18, 0x2B	; 43
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	20 62       	ori	r18, 0x20	; 32
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
				 return;
     1aa:	3d c0       	rjmp	.+122    	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
			 }
			 PORTD |= (1 << PD5);													//cell motor pin
     1ac:	8b e2       	ldi	r24, 0x2B	; 43
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	2b e2       	ldi	r18, 0x2B	; 43
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	20 62       	ori	r18, 0x20	; 32
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
			 cell_pwm_counter = CellStructure.cell_motor_pwm;
     1be:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <CellStructure+0x1>
     1c2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <cell_pwm_counter.2014>
			 cell_pwm_state = pwmClear;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
			 break;
     1cc:	2c c0       	rjmp	.+88     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		 case pwmClear:
			 if(cell_pwm_counter)
     1ce:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cell_pwm_counter.2014>
     1d2:	88 23       	and	r24, r24
     1d4:	31 f0       	breq	.+12     	; 0x1e2 <cell_isr_routine+0x92>
			 cell_pwm_counter--;
     1d6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cell_pwm_counter.2014>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <cell_pwm_counter.2014>
			 else{
				 PORTD &= ~(1 << PD5);											//cell motor pin
				 cell_pwm_counter = 100 - CellStructure.cell_motor_pwm;
				 cell_pwm_state = pwmReset;
			 }
			 break;
     1e0:	22 c0       	rjmp	.+68     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
			 break;
		 case pwmClear:
			 if(cell_pwm_counter)
			 cell_pwm_counter--;
			 else{
				 PORTD &= ~(1 << PD5);											//cell motor pin
     1e2:	8b e2       	ldi	r24, 0x2B	; 43
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	2b e2       	ldi	r18, 0x2B	; 43
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	f9 01       	movw	r30, r18
     1ec:	20 81       	ld	r18, Z
     1ee:	2f 7d       	andi	r18, 0xDF	; 223
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
				 cell_pwm_counter = 100 - CellStructure.cell_motor_pwm;
     1f4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <CellStructure+0x1>
     1f8:	94 e6       	ldi	r25, 0x64	; 100
     1fa:	f9 2f       	mov	r31, r25
     1fc:	f8 1b       	sub	r31, r24
     1fe:	8f 2f       	mov	r24, r31
     200:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <cell_pwm_counter.2014>
				 cell_pwm_state = pwmReset;
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
			 }
			 break;
     20a:	0d c0       	rjmp	.+26     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		 case pwmReset:
			 if(cell_pwm_counter)
     20c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cell_pwm_counter.2014>
     210:	88 23       	and	r24, r24
     212:	31 f0       	breq	.+12     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
			 cell_pwm_counter--;
     214:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cell_pwm_counter.2014>
     218:	81 50       	subi	r24, 0x01	; 1
     21a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <cell_pwm_counter.2014>
			 else
			 cell_pwm_state = pwmSetUpdate;
			 break;
     21e:	03 c0       	rjmp	.+6      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
			 break;
		 case pwmReset:
			 if(cell_pwm_counter)
			 cell_pwm_counter--;
			 else
			 cell_pwm_state = pwmSetUpdate;
     220:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
			 break;
     224:	00 00       	nop
	 }
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <init_disk>:
	DiskStrukture.delayed_stop = true;
 }

 uint32_t disk_get_sin_cos(){
	return DiskStrukture.sin_cos_counter;
 }
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <DiskStrukture+0x3>
     238:	84 e6       	ldi	r24, 0x64	; 100
     23a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <DiskStrukture+0x5>
     23e:	84 e6       	ldi	r24, 0x64	; 100
     240:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <DiskStrukture+0x4>
     244:	88 e6       	ldi	r24, 0x68	; 104
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	28 e6       	ldi	r18, 0x68	; 104
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	23 60       	ori	r18, 0x03	; 3
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
     256:	8b e6       	ldi	r24, 0x6B	; 107
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	2b e6       	ldi	r18, 0x6B	; 107
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	20 6c       	ori	r18, 0xC0	; 192
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
     268:	8c e6       	ldi	r24, 0x6C	; 108
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	2c e6       	ldi	r18, 0x6C	; 108
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	f9 01       	movw	r30, r18
     272:	20 81       	ld	r18, Z
     274:	21 60       	ori	r18, 0x01	; 1
     276:	fc 01       	movw	r30, r24
     278:	20 83       	st	Z, r18
     27a:	00 00       	nop
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <init_disk_power_on_value>:
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	0e 94 4d 01 	call	0x29a	; 0x29a <get_disk_label_position>
     28e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <DiskStrukture+0xc>
     292:	00 00       	nop
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <get_disk_label_position>:
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	1f 92       	push	r1
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	86 e2       	ldi	r24, 0x26	; 38
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	fc 01       	movw	r30, r24
     2aa:	80 81       	ld	r24, Z
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	81 70       	andi	r24, 0x01	; 1
     2b2:	99 27       	eor	r25, r25
     2b4:	89 2b       	or	r24, r25
     2b6:	11 f0       	breq	.+4      	; 0x2bc <get_disk_label_position+0x22>
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	1b c0       	rjmp	.+54     	; 0x2f2 <get_disk_label_position+0x58>
     2bc:	89 e2       	ldi	r24, 0x29	; 41
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	80 81       	ld	r24, Z
     2c4:	87 70       	andi	r24, 0x07	; 7
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	89 e2       	ldi	r24, 0x29	; 41
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	fc 01       	movw	r30, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	80 71       	andi	r24, 0x10	; 16
     2d6:	99 27       	eor	r25, r25
     2d8:	95 95       	asr	r25
     2da:	87 95       	ror	r24
     2dc:	98 2f       	mov	r25, r24
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	89 2b       	or	r24, r25
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	9f e0       	ldi	r25, 0x0F	; 15
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	f9 2f       	mov	r31, r25
     2ea:	f8 1b       	sub	r31, r24
     2ec:	8f 2f       	mov	r24, r31
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <disk_set_left_rotation>:
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	1f 92       	push	r1
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	89 83       	std	Y+1, r24	; 0x01
     306:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <DiskStrukture+0xf>
     30a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <reset_sin_cos>
     30e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <DiskStrukture+0x10>
     312:	8b e2       	ldi	r24, 0x2B	; 43
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2b e2       	ldi	r18, 0x2B	; 43
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	20 81       	ld	r18, Z
     31e:	2f 77       	andi	r18, 0x7F	; 127
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
     324:	85 e2       	ldi	r24, 0x25	; 37
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	25 e2       	ldi	r18, 0x25	; 37
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	20 81       	ld	r18, Z
     330:	21 60       	ori	r18, 0x01	; 1
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <DiskStrukture+0x3>
     33c:	00 00       	nop
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <disk_set_right_rotation>:
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	1f 92       	push	r1
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <DiskStrukture+0xf>
     358:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <reset_sin_cos>
     35c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <DiskStrukture+0x10>
     360:	8b e2       	ldi	r24, 0x2B	; 43
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	2b e2       	ldi	r18, 0x2B	; 43
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	f9 01       	movw	r30, r18
     36a:	20 81       	ld	r18, Z
     36c:	2f 77       	andi	r18, 0x7F	; 127
     36e:	fc 01       	movw	r30, r24
     370:	20 83       	st	Z, r18
     372:	85 e2       	ldi	r24, 0x25	; 37
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	25 e2       	ldi	r18, 0x25	; 37
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	f9 01       	movw	r30, r18
     37c:	20 81       	ld	r18, Z
     37e:	2e 7f       	andi	r18, 0xFE	; 254
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <DiskStrukture+0x3>
     38a:	00 00       	nop
     38c:	0f 90       	pop	r0
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <set_disk_enable_disk_rotation>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <DiskStrukture+0x11>
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <DiskStrukture+0xb>
     3a6:	00 00       	nop
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <disk_stop_rotation>:
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <reset_sin_cos>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <DiskStrukture+0x10>
     3c0:	00 00       	nop
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <reset_sin_cos>:

void reset_sin_cos(){
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	DiskStrukture.sin_cos_counter = 0;
     3d0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <DiskStrukture+0x7>
     3d4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <DiskStrukture+0x8>
     3d8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <DiskStrukture+0x9>
     3dc:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <DiskStrukture+0xa>
}
     3e0:	00 00       	nop
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <get_disk_state>:

 tDiskState get_disk_state(){
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
	return DiskStrukture.state;
     3f0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <DiskStrukture>
 }
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <disk_set_new_position>:

 void disk_set_new_position(uint8_t pos){
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	1f 92       	push	r1
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	89 83       	std	Y+1, r24	; 0x01
	if(get_disk_busy()){
     406:	0e 94 8d 03 	call	0x71a	; 0x71a <get_disk_busy>
     40a:	88 23       	and	r24, r24
     40c:	09 f0       	breq	.+2      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
     40e:	40 c0       	rjmp	.+128    	; 0x490 <__DATA_REGION_LENGTH__+0x90>
		return;
	}
	if((pos == 16)&&(get_lift_state() == Lift_UP)){
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	80 31       	cpi	r24, 0x10	; 16
     414:	19 f5       	brne	.+70     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
     416:	0e 94 f7 09 	call	0x13ee	; 0x13ee <get_lift_state>
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	f9 f4       	brne	.+62     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
		if((PIND&(1 << PD7)) == (1 << PD7)){
     41e:	89 e2       	ldi	r24, 0x29	; 41
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fc 01       	movw	r30, r24
     424:	80 81       	ld	r24, Z
     426:	88 23       	and	r24, r24
     428:	6c f4       	brge	.+26     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
			PORTD &= ~(1 << PD7);
     42a:	8b e2       	ldi	r24, 0x2B	; 43
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	2b e2       	ldi	r18, 0x2B	; 43
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	f9 01       	movw	r30, r18
     434:	20 81       	ld	r18, Z
     436:	2f 77       	andi	r18, 0x7F	; 127
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
			DiskStrukture.motor_pwm = 50;
     43c:	82 e3       	ldi	r24, 0x32	; 50
     43e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <DiskStrukture+0x3>
		}
		else{
			PORTD	|=	(1 << PD7);
			DiskStrukture.motor_pwm = 0;
		}
		return;
     442:	27 c0       	rjmp	.+78     	; 0x492 <__DATA_REGION_LENGTH__+0x92>
		if((PIND&(1 << PD7)) == (1 << PD7)){
			PORTD &= ~(1 << PD7);
			DiskStrukture.motor_pwm = 50;
		}
		else{
			PORTD	|=	(1 << PD7);
     444:	8b e2       	ldi	r24, 0x2B	; 43
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	2b e2       	ldi	r18, 0x2B	; 43
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	f9 01       	movw	r30, r18
     44e:	20 81       	ld	r18, Z
     450:	20 68       	ori	r18, 0x80	; 128
     452:	fc 01       	movw	r30, r24
     454:	20 83       	st	Z, r18
			DiskStrukture.motor_pwm = 0;
     456:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <DiskStrukture+0x3>
		}
		return;
     45a:	1b c0       	rjmp	.+54     	; 0x492 <__DATA_REGION_LENGTH__+0x92>
	}
	if((get_disk_label_position() == 0xff)||(get_disk_label_position() == pos)){
     45c:	0e 94 4d 01 	call	0x29a	; 0x29a <get_disk_label_position>
     460:	8f 3f       	cpi	r24, 0xFF	; 255
     462:	31 f0       	breq	.+12     	; 0x470 <__DATA_REGION_LENGTH__+0x70>
     464:	0e 94 4d 01 	call	0x29a	; 0x29a <get_disk_label_position>
     468:	98 2f       	mov	r25, r24
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	98 17       	cp	r25, r24
     46e:	31 f4       	brne	.+12     	; 0x47c <__DATA_REGION_LENGTH__+0x7c>
		DiskStrukture.state = DiskReady;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <DiskStrukture>
		DiskStrukture.state_mashine = stmDiskIddle;
     476:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <DiskStrukture+0x6>
		return;
     47a:	0b c0       	rjmp	.+22     	; 0x492 <__DATA_REGION_LENGTH__+0x92>
	}
	DiskStrukture.new_position = pos;
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <DiskStrukture+0xd>
	DiskStrukture.state_mashine = stmDiskStart;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
	DiskStrukture.new_command = true;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <DiskStrukture+0xe>
     48e:	01 c0       	rjmp	.+2      	; 0x492 <__DATA_REGION_LENGTH__+0x92>
	return DiskStrukture.state;
 }

 void disk_set_new_position(uint8_t pos){
	if(get_disk_busy()){
		return;
     490:	00 00       	nop
		return;
	}
	DiskStrukture.new_position = pos;
	DiskStrukture.state_mashine = stmDiskStart;
	DiskStrukture.new_command = true;
 }
     492:	0f 90       	pop	r0
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <disk_isr_working_cycle>:

 void disk_isr_working_cycle(){
     49a:	8f 92       	push	r8
     49c:	9f 92       	push	r9
     49e:	af 92       	push	r10
     4a0:	bf 92       	push	r11
     4a2:	cf 92       	push	r12
     4a4:	df 92       	push	r13
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
	static uint16_t delay_before = 0;
	switch(DiskStrukture.state_mashine){
     4b6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <DiskStrukture+0x6>
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	09 2e       	mov	r0, r25
     4c0:	00 0c       	add	r0, r0
     4c2:	aa 0b       	sbc	r26, r26
     4c4:	bb 0b       	sbc	r27, r27
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	28 e0       	ldi	r18, 0x08	; 8
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	84 1b       	sub	r24, r20
     4d0:	95 0b       	sbc	r25, r21
     4d2:	28 17       	cp	r18, r24
     4d4:	39 07       	cpc	r19, r25
     4d6:	08 f4       	brcc	.+2      	; 0x4da <disk_isr_working_cycle+0x40>
     4d8:	f3 c0       	rjmp	.+486    	; 0x6c0 <__stack+0x1c1>
     4da:	8c 5c       	subi	r24, 0xCC	; 204
     4dc:	9f 4f       	sbci	r25, 0xFF	; 255
     4de:	fc 01       	movw	r30, r24
     4e0:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__tablejump2__>
		case stmDiskIddle:
			return;
		case stmDiskStart:
			DiskStrukture.timeout = DISK_TIMEOUT;
     4e4:	80 e1       	ldi	r24, 0x10	; 16
     4e6:	97 e2       	ldi	r25, 0x27	; 39
     4e8:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <DiskStrukture+0x2>
     4ec:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <DiskStrukture+0x1>
			if(get_lift_state() != Lift_UP)
     4f0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <get_lift_state>
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	19 f0       	breq	.+6      	; 0x4fe <disk_isr_working_cycle+0x64>
				set_new_lift_position(LiftCommandUp);
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 3d 09 	call	0x127a	; 0x127a <set_new_lift_position>
			DiskStrukture.state_mashine = stmDiskUp;
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
			DiskStrukture.state = DiskMooving;
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <DiskStrukture>
			break;
     50a:	da c0       	rjmp	.+436    	; 0x6c0 <__stack+0x1c1>
		case stmDiskUp:
			if(!check_lift_bussy()&&(get_lift_state() != Lift_ERROR))
     50c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <check_lift_bussy>
     510:	98 2f       	mov	r25, r24
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	89 27       	eor	r24, r25
     516:	88 23       	and	r24, r24
     518:	39 f0       	breq	.+14     	; 0x528 <__stack+0x29>
     51a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <get_lift_state>
     51e:	83 30       	cpi	r24, 0x03	; 3
     520:	19 f0       	breq	.+6      	; 0x528 <__stack+0x29>
				DiskStrukture.state_mashine = stmDiskCheckPosition;
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
			if(DiskStrukture.timeout == 0)
     528:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <DiskStrukture+0x1>
     52c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <DiskStrukture+0x2>
     530:	89 2b       	or	r24, r25
     532:	09 f0       	breq	.+2      	; 0x536 <__stack+0x37>
     534:	bc c0       	rjmp	.+376    	; 0x6ae <__stack+0x1af>
				DiskStrukture.state_mashine = stmDiskError;
     536:	88 e0       	ldi	r24, 0x08	; 8
     538:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
			break;
     53c:	b8 c0       	rjmp	.+368    	; 0x6ae <__stack+0x1af>
		case stmDiskCheckPosition:
			DiskStrukture.current_position = get_disk_label_position();
     53e:	0e 94 4d 01 	call	0x29a	; 0x29a <get_disk_label_position>
     542:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <DiskStrukture+0xc>
			if(check_rotation_side(DiskStrukture) == RotationRight)
     546:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <DiskStrukture>
     54a:	90 90 2d 01 	lds	r9, 0x012D	; 0x80012d <DiskStrukture+0x1>
     54e:	a0 90 2e 01 	lds	r10, 0x012E	; 0x80012e <DiskStrukture+0x2>
     552:	b0 90 2f 01 	lds	r11, 0x012F	; 0x80012f <DiskStrukture+0x3>
     556:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <DiskStrukture+0x4>
     55a:	d0 90 31 01 	lds	r13, 0x0131	; 0x800131 <DiskStrukture+0x5>
     55e:	e0 90 32 01 	lds	r14, 0x0132	; 0x800132 <DiskStrukture+0x6>
     562:	f0 90 33 01 	lds	r15, 0x0133	; 0x800133 <DiskStrukture+0x7>
     566:	00 91 34 01 	lds	r16, 0x0134	; 0x800134 <DiskStrukture+0x8>
     56a:	10 91 35 01 	lds	r17, 0x0135	; 0x800135 <DiskStrukture+0x9>
     56e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <DiskStrukture+0xa>
     572:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <DiskStrukture+0xb>
     576:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <DiskStrukture+0xc>
     57a:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <DiskStrukture+0xd>
     57e:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <DiskStrukture+0xe>
     582:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <DiskStrukture+0xf>
     586:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <DiskStrukture+0x10>
     58a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <DiskStrukture+0x11>
     58e:	0e 94 96 03 	call	0x72c	; 0x72c <check_rotation_side>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	21 f4       	brne	.+8      	; 0x59e <__stack+0x9f>
				disk_set_right_rotation(DISK_PWM);
     596:	82 e3       	ldi	r24, 0x32	; 50
     598:	0e 94 a3 01 	call	0x346	; 0x346 <disk_set_right_rotation>
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <__stack+0xa5>
			else
				disk_set_left_rotation(DISK_PWM);
     59e:	82 e3       	ldi	r24, 0x32	; 50
     5a0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <disk_set_left_rotation>
			delay_before = DISK_DELAY_BS;
     5a4:	8a ef       	ldi	r24, 0xFA	; 250
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <delay_before.2032+0x1>
     5ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <delay_before.2032>
			DiskStrukture.state_mashine = stmDelayBeforStart;
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
			break;
     5b6:	84 c0       	rjmp	.+264    	; 0x6c0 <__stack+0x1c1>
		case stmDelayBeforStart:
			if(delay_before == 0){
     5b8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <delay_before.2032>
     5bc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <delay_before.2032+0x1>
     5c0:	89 2b       	or	r24, r25
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <__stack+0xc7>
     5c4:	76 c0       	rjmp	.+236    	; 0x6b2 <__stack+0x1b3>
					set_disk_enable_disk_rotation();
     5c6:	0e 94 ca 01 	call	0x394	; 0x394 <set_disk_enable_disk_rotation>
					DiskStrukture.state_mashine = stmDiskRotation;
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
				}
			break;
     5d0:	70 c0       	rjmp	.+224    	; 0x6b2 <__stack+0x1b3>
		case  stmDiskRotation:
			if(DiskStrukture.enable_rotation == false){
     5d2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <DiskStrukture+0xb>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	89 27       	eor	r24, r25
     5da:	88 23       	and	r24, r24
     5dc:	49 f0       	breq	.+18     	; 0x5f0 <__stack+0xf1>
				DiskStrukture.state_mashine = stmDelayBeforeDown;
     5de:	86 e0       	ldi	r24, 0x06	; 6
     5e0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
				delay_before = DISK_DELAY_BD;
     5e4:	84 ef       	ldi	r24, 0xF4	; 244
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <delay_before.2032+0x1>
     5ec:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <delay_before.2032>
				}
			if(DiskStrukture.timeout == 0)
     5f0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <DiskStrukture+0x1>
     5f4:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <DiskStrukture+0x2>
     5f8:	89 2b       	or	r24, r25
     5fa:	19 f4       	brne	.+6      	; 0x602 <__stack+0x103>
				DiskStrukture.state_mashine = stmDiskError;
     5fc:	88 e0       	ldi	r24, 0x08	; 8
     5fe:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
			if((DiskStrukture.timeout < (DISK_TIMEOUT - DISK_PRESENT_COUNER))&&(DiskStrukture.disk_present_counter == 0))
     602:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <DiskStrukture+0x1>
     606:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <DiskStrukture+0x2>
     60a:	80 34       	cpi	r24, 0x40	; 64
     60c:	9f 41       	sbci	r25, 0x1F	; 31
     60e:	08 f0       	brcs	.+2      	; 0x612 <__stack+0x113>
     610:	52 c0       	rjmp	.+164    	; 0x6b6 <__stack+0x1b7>
     612:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <DiskStrukture+0x11>
     616:	88 23       	and	r24, r24
     618:	09 f0       	breq	.+2      	; 0x61c <__stack+0x11d>
     61a:	4d c0       	rjmp	.+154    	; 0x6b6 <__stack+0x1b7>
				DiskStrukture.state_mashine = stmDiskError;
     61c:	88 e0       	ldi	r24, 0x08	; 8
     61e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
			break;
     622:	49 c0       	rjmp	.+146    	; 0x6b6 <__stack+0x1b7>
		case stmDelayBeforeDown:
			if(delay_before == 0){
     624:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <delay_before.2032>
     628:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <delay_before.2032+0x1>
     62c:	89 2b       	or	r24, r25
     62e:	09 f0       	breq	.+2      	; 0x632 <__stack+0x133>
     630:	44 c0       	rjmp	.+136    	; 0x6ba <__stack+0x1bb>
				set_new_lift_position(LiftCommandDown);
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 3d 09 	call	0x127a	; 0x127a <set_new_lift_position>
				DiskStrukture.state_mashine = stmDiskDown;
     638:	87 e0       	ldi	r24, 0x07	; 7
     63a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
			}
			break;
     63e:	3d c0       	rjmp	.+122    	; 0x6ba <__stack+0x1bb>
		case stmDiskDown:
			if(!check_lift_bussy()&&(get_lift_state() != Lift_ERROR)){
     640:	0e 94 ee 09 	call	0x13dc	; 0x13dc <check_lift_bussy>
     644:	98 2f       	mov	r25, r24
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	89 27       	eor	r24, r25
     64a:	88 23       	and	r24, r24
     64c:	59 f0       	breq	.+22     	; 0x664 <__stack+0x165>
     64e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <get_lift_state>
     652:	83 30       	cpi	r24, 0x03	; 3
     654:	39 f0       	breq	.+14     	; 0x664 <__stack+0x165>
				DiskStrukture.state = DiskReady;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <DiskStrukture>
				DiskStrukture.state_mashine = stmDiskIddle;
     65c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <DiskStrukture+0x6>
				DiskStrukture.new_command = false;
     660:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <DiskStrukture+0xe>
			}
			if(DiskStrukture.timeout == 0)
     664:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <DiskStrukture+0x1>
     668:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <DiskStrukture+0x2>
     66c:	89 2b       	or	r24, r25
     66e:	39 f5       	brne	.+78     	; 0x6be <__stack+0x1bf>
				DiskStrukture.state_mashine = stmDiskError;
     670:	88 e0       	ldi	r24, 0x08	; 8
     672:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <DiskStrukture+0x6>
			break;
     676:	23 c0       	rjmp	.+70     	; 0x6be <__stack+0x1bf>
		case stmDiskError:
			PORTD	|=	(1 << PD7);
     678:	8b e2       	ldi	r24, 0x2B	; 43
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2b e2       	ldi	r18, 0x2B	; 43
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	f9 01       	movw	r30, r18
     682:	20 81       	ld	r18, Z
     684:	20 68       	ori	r18, 0x80	; 128
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
			DiskStrukture.motor_pwm = 0;
     68a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <DiskStrukture+0x3>
			if(DiskStrukture.disk_present_counter == 0)
     68e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <DiskStrukture+0x11>
     692:	88 23       	and	r24, r24
     694:	21 f4       	brne	.+8      	; 0x69e <__stack+0x19f>
				DiskStrukture.state = DiskAbsend;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <DiskStrukture>
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <__stack+0x1a5>
			else
				DiskStrukture.state = DiskError;
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <DiskStrukture>
			DiskStrukture.state_mashine = stmDiskIddle;
     6a4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <DiskStrukture+0x6>
			DiskStrukture.new_command = false;
     6a8:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <DiskStrukture+0xe>
			break;
     6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <__stack+0x1c1>
		case stmDiskUp:
			if(!check_lift_bussy()&&(get_lift_state() != Lift_ERROR))
				DiskStrukture.state_mashine = stmDiskCheckPosition;
			if(DiskStrukture.timeout == 0)
				DiskStrukture.state_mashine = stmDiskError;
			break;
     6ae:	00 00       	nop
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <__stack+0x1c1>
		case stmDelayBeforStart:
			if(delay_before == 0){
					set_disk_enable_disk_rotation();
					DiskStrukture.state_mashine = stmDiskRotation;
				}
			break;
     6b2:	00 00       	nop
     6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <__stack+0x1c1>
				}
			if(DiskStrukture.timeout == 0)
				DiskStrukture.state_mashine = stmDiskError;
			if((DiskStrukture.timeout < (DISK_TIMEOUT - DISK_PRESENT_COUNER))&&(DiskStrukture.disk_present_counter == 0))
				DiskStrukture.state_mashine = stmDiskError;
			break;
     6b6:	00 00       	nop
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <__stack+0x1c1>
		case stmDelayBeforeDown:
			if(delay_before == 0){
				set_new_lift_position(LiftCommandDown);
				DiskStrukture.state_mashine = stmDiskDown;
			}
			break;
     6ba:	00 00       	nop
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <__stack+0x1c1>
				DiskStrukture.state_mashine = stmDiskIddle;
				DiskStrukture.new_command = false;
			}
			if(DiskStrukture.timeout == 0)
				DiskStrukture.state_mashine = stmDiskError;
			break;
     6be:	00 00       	nop
				DiskStrukture.state = DiskError;
			DiskStrukture.state_mashine = stmDiskIddle;
			DiskStrukture.new_command = false;
			break;
	}
	if(DiskStrukture.timeout)
     6c0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <DiskStrukture+0x1>
     6c4:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <DiskStrukture+0x2>
     6c8:	89 2b       	or	r24, r25
     6ca:	49 f0       	breq	.+18     	; 0x6de <__stack+0x1df>
		DiskStrukture.timeout--;
     6cc:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <DiskStrukture+0x1>
     6d0:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <DiskStrukture+0x2>
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <DiskStrukture+0x2>
     6da:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <DiskStrukture+0x1>
	if(delay_before)
     6de:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <delay_before.2032>
     6e2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <delay_before.2032+0x1>
     6e6:	89 2b       	or	r24, r25
     6e8:	59 f0       	breq	.+22     	; 0x700 <__stack+0x201>
		delay_before--;
     6ea:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <delay_before.2032>
     6ee:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <delay_before.2032+0x1>
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <delay_before.2032+0x1>
     6f8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <delay_before.2032>
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <__stack+0x201>

 void disk_isr_working_cycle(){
	static uint16_t delay_before = 0;
	switch(DiskStrukture.state_mashine){
		case stmDiskIddle:
			return;
     6fe:	00 00       	nop
	}
	if(DiskStrukture.timeout)
		DiskStrukture.timeout--;
	if(delay_before)
		delay_before--;
 }
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	08 95       	ret

0000071a <get_disk_busy>:

 bool get_disk_busy(){
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
	return DiskStrukture.new_command;
     722:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <DiskStrukture+0xe>
 }
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <check_rotation_side>:

 tDiskRotation check_rotation_side(tDiskSturtture disk){
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	63 97       	sbiw	r28, 0x13	; 19
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	8a 82       	std	Y+2, r8	; 0x02
     756:	9b 82       	std	Y+3, r9	; 0x03
     758:	ac 82       	std	Y+4, r10	; 0x04
     75a:	bd 82       	std	Y+5, r11	; 0x05
     75c:	ce 82       	std	Y+6, r12	; 0x06
     75e:	df 82       	std	Y+7, r13	; 0x07
     760:	e8 86       	std	Y+8, r14	; 0x08
     762:	f9 86       	std	Y+9, r15	; 0x09
     764:	0a 87       	std	Y+10, r16	; 0x0a
     766:	1b 87       	std	Y+11, r17	; 0x0b
     768:	2c 87       	std	Y+12, r18	; 0x0c
     76a:	3d 87       	std	Y+13, r19	; 0x0d
     76c:	4e 87       	std	Y+14, r20	; 0x0e
     76e:	5f 87       	std	Y+15, r21	; 0x0f
     770:	68 8b       	std	Y+16, r22	; 0x10
     772:	79 8b       	std	Y+17, r23	; 0x11
     774:	8a 8b       	std	Y+18, r24	; 0x12
     776:	9b 8b       	std	Y+19, r25	; 0x13
		int8_t delta = 0;
     778:	19 82       	std	Y+1, r1	; 0x01
		delta = disk.current_position - disk.new_position;
     77a:	9e 85       	ldd	r25, Y+14	; 0x0e
     77c:	8f 85       	ldd	r24, Y+15	; 0x0f
     77e:	29 2f       	mov	r18, r25
     780:	28 1b       	sub	r18, r24
     782:	82 2f       	mov	r24, r18
     784:	89 83       	std	Y+1, r24	; 0x01
		if(delta < 0){
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	88 23       	and	r24, r24
     78a:	3c f4       	brge	.+14     	; 0x79a <check_rotation_side+0x6e>
			if(delta < -7)
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	89 3f       	cpi	r24, 0xF9	; 249
     790:	14 f4       	brge	.+4      	; 0x796 <check_rotation_side+0x6a>
				return RotationRight;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	08 c0       	rjmp	.+16     	; 0x7a6 <check_rotation_side+0x7a>
			else
				return RotationLeft;
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	06 c0       	rjmp	.+12     	; 0x7a6 <check_rotation_side+0x7a>
		}
		else{
			if(delta > 7)
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	88 30       	cpi	r24, 0x08	; 8
     79e:	14 f0       	brlt	.+4      	; 0x7a4 <check_rotation_side+0x78>
				return RotationLeft;
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <check_rotation_side+0x7a>
			else
				return RotationRight;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
		}
		return RotationRight;
 }
     7a6:	63 96       	adiw	r28, 0x13	; 19
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	af 90       	pop	r10
     7c6:	9f 90       	pop	r9
     7c8:	8f 90       	pop	r8
     7ca:	08 95       	ret

000007cc <disk_isr_update_motor_pwm>:

 void disk_isr_update_motor_pwm(){
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
	static uint8_t motor_pwm_counter = 0;
	static tSoftPwmState motor_pwm_state = 0;
	switch(motor_pwm_state){
     7d4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <motor_pwm_state.2052>
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	91 05       	cpc	r25, r1
     7e0:	a1 f1       	breq	.+104    	; 0x84a <disk_isr_update_motor_pwm+0x7e>
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	91 05       	cpc	r25, r1
     7e6:	09 f4       	brne	.+2      	; 0x7ea <disk_isr_update_motor_pwm+0x1e>
     7e8:	4f c0       	rjmp	.+158    	; 0x888 <disk_isr_update_motor_pwm+0xbc>
     7ea:	89 2b       	or	r24, r25
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <disk_isr_update_motor_pwm+0x24>
     7ee:	59 c0       	rjmp	.+178    	; 0x8a2 <disk_isr_update_motor_pwm+0xd6>
	case pwmSetUpdate:
		if(DiskStrukture.motor_pwm == 0){
     7f0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <DiskStrukture+0x3>
     7f4:	88 23       	and	r24, r24
     7f6:	51 f4       	brne	.+20     	; 0x80c <disk_isr_update_motor_pwm+0x40>
			PORTD &= ~(1 << PD6);
     7f8:	8b e2       	ldi	r24, 0x2B	; 43
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	2b e2       	ldi	r18, 0x2B	; 43
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	f9 01       	movw	r30, r18
     802:	20 81       	ld	r18, Z
     804:	2f 7b       	andi	r18, 0xBF	; 191
     806:	fc 01       	movw	r30, r24
     808:	20 83       	st	Z, r18
			return;
     80a:	4b c0       	rjmp	.+150    	; 0x8a2 <disk_isr_update_motor_pwm+0xd6>
		}
		if(DiskStrukture.motor_pwm >= 100){
     80c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <DiskStrukture+0x3>
     810:	84 36       	cpi	r24, 0x64	; 100
     812:	50 f0       	brcs	.+20     	; 0x828 <disk_isr_update_motor_pwm+0x5c>
			PORTD |= (1 << PD6);
     814:	8b e2       	ldi	r24, 0x2B	; 43
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	2b e2       	ldi	r18, 0x2B	; 43
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	20 81       	ld	r18, Z
     820:	20 64       	ori	r18, 0x40	; 64
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18
			return;
     826:	3d c0       	rjmp	.+122    	; 0x8a2 <disk_isr_update_motor_pwm+0xd6>
		}
		PORTD |= (1 << PD6);
     828:	8b e2       	ldi	r24, 0x2B	; 43
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	2b e2       	ldi	r18, 0x2B	; 43
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	20 81       	ld	r18, Z
     834:	20 64       	ori	r18, 0x40	; 64
     836:	fc 01       	movw	r30, r24
     838:	20 83       	st	Z, r18
		motor_pwm_counter = DiskStrukture.motor_pwm;
     83a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <DiskStrukture+0x3>
     83e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <motor_pwm_counter.2051>
		motor_pwm_state = pwmClear;	
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <motor_pwm_state.2052>
		break;
     848:	2c c0       	rjmp	.+88     	; 0x8a2 <disk_isr_update_motor_pwm+0xd6>
	case pwmClear:
		if(motor_pwm_counter)
     84a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <motor_pwm_counter.2051>
     84e:	88 23       	and	r24, r24
     850:	31 f0       	breq	.+12     	; 0x85e <disk_isr_update_motor_pwm+0x92>
			motor_pwm_counter--;
     852:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <motor_pwm_counter.2051>
     856:	81 50       	subi	r24, 0x01	; 1
     858:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <motor_pwm_counter.2051>
		else{
			PORTD &= ~(1 << PD6);
			motor_pwm_counter = 100 - DiskStrukture.motor_pwm;
			motor_pwm_state = pwmReset;
		}
		break;
     85c:	22 c0       	rjmp	.+68     	; 0x8a2 <disk_isr_update_motor_pwm+0xd6>
		break;
	case pwmClear:
		if(motor_pwm_counter)
			motor_pwm_counter--;
		else{
			PORTD &= ~(1 << PD6);
     85e:	8b e2       	ldi	r24, 0x2B	; 43
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	2b e2       	ldi	r18, 0x2B	; 43
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	f9 01       	movw	r30, r18
     868:	20 81       	ld	r18, Z
     86a:	2f 7b       	andi	r18, 0xBF	; 191
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
			motor_pwm_counter = 100 - DiskStrukture.motor_pwm;
     870:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <DiskStrukture+0x3>
     874:	94 e6       	ldi	r25, 0x64	; 100
     876:	f9 2f       	mov	r31, r25
     878:	f8 1b       	sub	r31, r24
     87a:	8f 2f       	mov	r24, r31
     87c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <motor_pwm_counter.2051>
			motor_pwm_state = pwmReset;
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <motor_pwm_state.2052>
		}
		break;
     886:	0d c0       	rjmp	.+26     	; 0x8a2 <disk_isr_update_motor_pwm+0xd6>
	case pwmReset:
		if(motor_pwm_counter)
     888:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <motor_pwm_counter.2051>
     88c:	88 23       	and	r24, r24
     88e:	31 f0       	breq	.+12     	; 0x89c <disk_isr_update_motor_pwm+0xd0>
			motor_pwm_counter--;
     890:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <motor_pwm_counter.2051>
     894:	81 50       	subi	r24, 0x01	; 1
     896:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <motor_pwm_counter.2051>
		else
			motor_pwm_state = pwmSetUpdate;
		break;
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <disk_isr_update_motor_pwm+0xd6>
		break;
	case pwmReset:
		if(motor_pwm_counter)
			motor_pwm_counter--;
		else
			motor_pwm_state = pwmSetUpdate;
     89c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <motor_pwm_state.2052>
		break;
     8a0:	00 00       	nop
	}
 }
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <disk_isr_update_led_sync_pwm>:

 void disk_isr_update_led_sync_pwm(){
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
 	static uint8_t sync_pwm_counter = 0;
 	static tSoftPwmState sync_pwm_state = 0;
 	switch(sync_pwm_state){
     8b0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <sync_pwm_state.2060>
     8b4:	88 2f       	mov	r24, r24
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	91 05       	cpc	r25, r1
     8bc:	a1 f1       	breq	.+104    	; 0x926 <disk_isr_update_led_sync_pwm+0x7e>
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	91 05       	cpc	r25, r1
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <disk_isr_update_led_sync_pwm+0x1e>
     8c4:	4f c0       	rjmp	.+158    	; 0x964 <disk_isr_update_led_sync_pwm+0xbc>
     8c6:	89 2b       	or	r24, r25
     8c8:	09 f0       	breq	.+2      	; 0x8cc <disk_isr_update_led_sync_pwm+0x24>
     8ca:	59 c0       	rjmp	.+178    	; 0x97e <disk_isr_update_led_sync_pwm+0xd6>
	 	case pwmSetUpdate:
	 	if(DiskStrukture.led_sync_pwm == 0){
     8cc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <DiskStrukture+0x4>
     8d0:	88 23       	and	r24, r24
     8d2:	51 f4       	brne	.+20     	; 0x8e8 <disk_isr_update_led_sync_pwm+0x40>
		 	PORTB &= ~(1 << PB2);
     8d4:	85 e2       	ldi	r24, 0x25	; 37
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	25 e2       	ldi	r18, 0x25	; 37
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	f9 01       	movw	r30, r18
     8de:	20 81       	ld	r18, Z
     8e0:	2b 7f       	andi	r18, 0xFB	; 251
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 83       	st	Z, r18
		 	return;
     8e6:	4b c0       	rjmp	.+150    	; 0x97e <disk_isr_update_led_sync_pwm+0xd6>
	 	}
	 	if(DiskStrukture.led_sync_pwm >= 100){
     8e8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <DiskStrukture+0x4>
     8ec:	84 36       	cpi	r24, 0x64	; 100
     8ee:	50 f0       	brcs	.+20     	; 0x904 <disk_isr_update_led_sync_pwm+0x5c>
		 	PORTB |= (1 << PB2);
     8f0:	85 e2       	ldi	r24, 0x25	; 37
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	25 e2       	ldi	r18, 0x25	; 37
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	24 60       	ori	r18, 0x04	; 4
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
		 	return;
     902:	3d c0       	rjmp	.+122    	; 0x97e <disk_isr_update_led_sync_pwm+0xd6>
	 	}
	 	PORTB |= (1 << PB2);
     904:	85 e2       	ldi	r24, 0x25	; 37
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	25 e2       	ldi	r18, 0x25	; 37
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	24 60       	ori	r18, 0x04	; 4
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
	 	sync_pwm_counter = DiskStrukture.led_sync_pwm;
     916:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <DiskStrukture+0x4>
     91a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sync_pwm_counter.2059>
	 	sync_pwm_state = pwmClear;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <sync_pwm_state.2060>
	 	break;
     924:	2c c0       	rjmp	.+88     	; 0x97e <disk_isr_update_led_sync_pwm+0xd6>
	 	case pwmClear:
	 	if(sync_pwm_counter)
     926:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sync_pwm_counter.2059>
     92a:	88 23       	and	r24, r24
     92c:	31 f0       	breq	.+12     	; 0x93a <disk_isr_update_led_sync_pwm+0x92>
	 	sync_pwm_counter--;
     92e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sync_pwm_counter.2059>
     932:	81 50       	subi	r24, 0x01	; 1
     934:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sync_pwm_counter.2059>
	 	else{
		 	PORTB &= ~(1 << PB2);
		 	sync_pwm_counter = 100 - DiskStrukture.led_sync_pwm;
		 	sync_pwm_state = pwmReset;
	 	}
	 	break;
     938:	22 c0       	rjmp	.+68     	; 0x97e <disk_isr_update_led_sync_pwm+0xd6>
	 	break;
	 	case pwmClear:
	 	if(sync_pwm_counter)
	 	sync_pwm_counter--;
	 	else{
		 	PORTB &= ~(1 << PB2);
     93a:	85 e2       	ldi	r24, 0x25	; 37
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	25 e2       	ldi	r18, 0x25	; 37
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	f9 01       	movw	r30, r18
     944:	20 81       	ld	r18, Z
     946:	2b 7f       	andi	r18, 0xFB	; 251
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
		 	sync_pwm_counter = 100 - DiskStrukture.led_sync_pwm;
     94c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <DiskStrukture+0x4>
     950:	94 e6       	ldi	r25, 0x64	; 100
     952:	f9 2f       	mov	r31, r25
     954:	f8 1b       	sub	r31, r24
     956:	8f 2f       	mov	r24, r31
     958:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sync_pwm_counter.2059>
		 	sync_pwm_state = pwmReset;
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <sync_pwm_state.2060>
	 	}
	 	break;
     962:	0d c0       	rjmp	.+26     	; 0x97e <disk_isr_update_led_sync_pwm+0xd6>
	 	case pwmReset:
	 	if(sync_pwm_counter)
     964:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sync_pwm_counter.2059>
     968:	88 23       	and	r24, r24
     96a:	31 f0       	breq	.+12     	; 0x978 <disk_isr_update_led_sync_pwm+0xd0>
	 	sync_pwm_counter--;
     96c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sync_pwm_counter.2059>
     970:	81 50       	subi	r24, 0x01	; 1
     972:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sync_pwm_counter.2059>
	 	else
	 	sync_pwm_state = pwmSetUpdate;
	 	break;
     976:	03 c0       	rjmp	.+6      	; 0x97e <disk_isr_update_led_sync_pwm+0xd6>
	 	break;
	 	case pwmReset:
	 	if(sync_pwm_counter)
	 	sync_pwm_counter--;
	 	else
	 	sync_pwm_state = pwmSetUpdate;
     978:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <sync_pwm_state.2060>
	 	break;
     97c:	00 00       	nop
 	}
 }
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <disk_isr_update_led_data_pwm>:

 void disk_isr_update_led_data_pwm(){
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
 	static uint8_t data_pwm_counter = 0;
 	static tSoftPwmState data_pwm_state = 0;
 	switch(data_pwm_state){
     98c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <data_pwm_state.2068>
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	91 05       	cpc	r25, r1
     998:	a1 f1       	breq	.+104    	; 0xa02 <disk_isr_update_led_data_pwm+0x7e>
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	91 05       	cpc	r25, r1
     99e:	09 f4       	brne	.+2      	; 0x9a2 <disk_isr_update_led_data_pwm+0x1e>
     9a0:	4f c0       	rjmp	.+158    	; 0xa40 <disk_isr_update_led_data_pwm+0xbc>
     9a2:	89 2b       	or	r24, r25
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <disk_isr_update_led_data_pwm+0x24>
     9a6:	59 c0       	rjmp	.+178    	; 0xa5a <disk_isr_update_led_data_pwm+0xd6>
	 	case pwmSetUpdate:
	 	if(DiskStrukture.led_data_pwm == 0){
     9a8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <DiskStrukture+0x5>
     9ac:	88 23       	and	r24, r24
     9ae:	51 f4       	brne	.+20     	; 0x9c4 <disk_isr_update_led_data_pwm+0x40>
		 	PORTD &= ~(1 << PD3);
     9b0:	8b e2       	ldi	r24, 0x2B	; 43
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	2b e2       	ldi	r18, 0x2B	; 43
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	f9 01       	movw	r30, r18
     9ba:	20 81       	ld	r18, Z
     9bc:	27 7f       	andi	r18, 0xF7	; 247
     9be:	fc 01       	movw	r30, r24
     9c0:	20 83       	st	Z, r18
		 	return;
     9c2:	4b c0       	rjmp	.+150    	; 0xa5a <disk_isr_update_led_data_pwm+0xd6>
	 	}
	 	if(DiskStrukture.led_data_pwm >= 100){
     9c4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <DiskStrukture+0x5>
     9c8:	84 36       	cpi	r24, 0x64	; 100
     9ca:	50 f0       	brcs	.+20     	; 0x9e0 <disk_isr_update_led_data_pwm+0x5c>
		 	PORTD |= (1 << PD3);
     9cc:	8b e2       	ldi	r24, 0x2B	; 43
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	2b e2       	ldi	r18, 0x2B	; 43
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	f9 01       	movw	r30, r18
     9d6:	20 81       	ld	r18, Z
     9d8:	28 60       	ori	r18, 0x08	; 8
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18
		 	return;
     9de:	3d c0       	rjmp	.+122    	; 0xa5a <disk_isr_update_led_data_pwm+0xd6>
	 	}
	 	PORTD |= (1 << PD3);
     9e0:	8b e2       	ldi	r24, 0x2B	; 43
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	2b e2       	ldi	r18, 0x2B	; 43
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	f9 01       	movw	r30, r18
     9ea:	20 81       	ld	r18, Z
     9ec:	28 60       	ori	r18, 0x08	; 8
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
	 	data_pwm_counter = DiskStrukture.led_data_pwm;
     9f2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <DiskStrukture+0x5>
     9f6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <data_pwm_counter.2067>
	 	data_pwm_state = pwmClear;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <data_pwm_state.2068>
	 	break;
     a00:	2c c0       	rjmp	.+88     	; 0xa5a <disk_isr_update_led_data_pwm+0xd6>
	 	case pwmClear:
	 	if(data_pwm_counter)
     a02:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <data_pwm_counter.2067>
     a06:	88 23       	and	r24, r24
     a08:	31 f0       	breq	.+12     	; 0xa16 <disk_isr_update_led_data_pwm+0x92>
	 	data_pwm_counter--;
     a0a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <data_pwm_counter.2067>
     a0e:	81 50       	subi	r24, 0x01	; 1
     a10:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <data_pwm_counter.2067>
	 	else{
		 	PORTD &= ~(1 << PD3);
		 	data_pwm_counter = 100 - DiskStrukture.led_data_pwm;
		 	data_pwm_state = pwmReset;
	 	}
	 	break;
     a14:	22 c0       	rjmp	.+68     	; 0xa5a <disk_isr_update_led_data_pwm+0xd6>
	 	break;
	 	case pwmClear:
	 	if(data_pwm_counter)
	 	data_pwm_counter--;
	 	else{
		 	PORTD &= ~(1 << PD3);
     a16:	8b e2       	ldi	r24, 0x2B	; 43
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	2b e2       	ldi	r18, 0x2B	; 43
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	27 7f       	andi	r18, 0xF7	; 247
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
		 	data_pwm_counter = 100 - DiskStrukture.led_data_pwm;
     a28:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <DiskStrukture+0x5>
     a2c:	94 e6       	ldi	r25, 0x64	; 100
     a2e:	f9 2f       	mov	r31, r25
     a30:	f8 1b       	sub	r31, r24
     a32:	8f 2f       	mov	r24, r31
     a34:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <data_pwm_counter.2067>
		 	data_pwm_state = pwmReset;
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <data_pwm_state.2068>
	 	}
	 	break;
     a3e:	0d c0       	rjmp	.+26     	; 0xa5a <disk_isr_update_led_data_pwm+0xd6>
	 	case pwmReset:
	 	if(data_pwm_counter)
     a40:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <data_pwm_counter.2067>
     a44:	88 23       	and	r24, r24
     a46:	31 f0       	breq	.+12     	; 0xa54 <disk_isr_update_led_data_pwm+0xd0>
	 	data_pwm_counter--;
     a48:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <data_pwm_counter.2067>
     a4c:	81 50       	subi	r24, 0x01	; 1
     a4e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <data_pwm_counter.2067>
	 	else
	 	data_pwm_state = pwmSetUpdate;
	 	break;
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <disk_isr_update_led_data_pwm+0xd6>
	 	break;
	 	case pwmReset:
	 	if(data_pwm_counter)
	 	data_pwm_counter--;
	 	else
	 	data_pwm_state = pwmSetUpdate;
     a54:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <data_pwm_state.2068>
	 	break;
     a58:	00 00       	nop
 	}
 }
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <__vector_3>:

ISR (PCINT0_vect){
     a60:	1f 92       	push	r1
     a62:	0f 92       	push	r0
     a64:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	7f 93       	push	r23
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	af 93       	push	r26
     a7e:	bf 93       	push	r27
     a80:	ef 93       	push	r30
     a82:	ff 93       	push	r31
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
	DiskStrukture.sin_cos_counter++;
     a8c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <DiskStrukture+0x7>
     a90:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <DiskStrukture+0x8>
     a94:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <DiskStrukture+0x9>
     a98:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <DiskStrukture+0xa>
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	a1 1d       	adc	r26, r1
     aa0:	b1 1d       	adc	r27, r1
     aa2:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <DiskStrukture+0x7>
     aa6:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <DiskStrukture+0x8>
     aaa:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <DiskStrukture+0x9>
     aae:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <DiskStrukture+0xa>
	if(DiskStrukture.delayed_stop){
     ab2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <DiskStrukture+0x10>
     ab6:	88 23       	and	r24, r24
     ab8:	09 f4       	brne	.+2      	; 0xabc <__vector_3+0x5c>
     aba:	48 c0       	rjmp	.+144    	; 0xb4c <__vector_3+0xec>
		if((DiskStrukture.sin_cos_counter > 100)&&(DiskStrukture.disk_rotation == RotationLeft)){
     abc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <DiskStrukture+0x7>
     ac0:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <DiskStrukture+0x8>
     ac4:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <DiskStrukture+0x9>
     ac8:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <DiskStrukture+0xa>
     acc:	85 36       	cpi	r24, 0x65	; 101
     ace:	91 05       	cpc	r25, r1
     ad0:	a1 05       	cpc	r26, r1
     ad2:	b1 05       	cpc	r27, r1
     ad4:	b8 f0       	brcs	.+46     	; 0xb04 <__vector_3+0xa4>
     ad6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <DiskStrukture+0xf>
     ada:	88 23       	and	r24, r24
     adc:	99 f4       	brne	.+38     	; 0xb04 <__vector_3+0xa4>
			PORTD	|=	(1 << PD7);													// break pin
     ade:	8b e2       	ldi	r24, 0x2B	; 43
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	2b e2       	ldi	r18, 0x2B	; 43
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	20 68       	ori	r18, 0x80	; 128
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
			DiskStrukture.motor_pwm = 0;
     af0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <DiskStrukture+0x3>
			DiskStrukture.enable_rotation = false;
     af4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <DiskStrukture+0xb>
			DiskStrukture.delayed_stop = false;
     af8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <DiskStrukture+0x10>
			DiskStrukture.new_position = get_disk_label_position();
     afc:	0e 94 4d 01 	call	0x29a	; 0x29a <get_disk_label_position>
     b00:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <DiskStrukture+0xd>
		}
		if((DiskStrukture.sin_cos_counter > 100)&&(DiskStrukture.disk_rotation == RotationRight)){
     b04:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <DiskStrukture+0x7>
     b08:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <DiskStrukture+0x8>
     b0c:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <DiskStrukture+0x9>
     b10:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <DiskStrukture+0xa>
     b14:	85 36       	cpi	r24, 0x65	; 101
     b16:	91 05       	cpc	r25, r1
     b18:	a1 05       	cpc	r26, r1
     b1a:	b1 05       	cpc	r27, r1
     b1c:	b8 f0       	brcs	.+46     	; 0xb4c <__vector_3+0xec>
     b1e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <DiskStrukture+0xf>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	99 f4       	brne	.+38     	; 0xb4c <__vector_3+0xec>
			PORTD	|=	(1 << PD7);													// break pin
     b26:	8b e2       	ldi	r24, 0x2B	; 43
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	2b e2       	ldi	r18, 0x2B	; 43
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	f9 01       	movw	r30, r18
     b30:	20 81       	ld	r18, Z
     b32:	20 68       	ori	r18, 0x80	; 128
     b34:	fc 01       	movw	r30, r24
     b36:	20 83       	st	Z, r18
			DiskStrukture.motor_pwm = 0;
     b38:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <DiskStrukture+0x3>
			DiskStrukture.enable_rotation = false;
     b3c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <DiskStrukture+0xb>
			DiskStrukture.delayed_stop = false;
     b40:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <DiskStrukture+0x10>
			DiskStrukture.new_position = get_disk_label_position();
     b44:	0e 94 4d 01 	call	0x29a	; 0x29a <get_disk_label_position>
     b48:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <DiskStrukture+0xd>
		}
	}
}
     b4c:	00 00       	nop
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	ff 91       	pop	r31
     b54:	ef 91       	pop	r30
     b56:	bf 91       	pop	r27
     b58:	af 91       	pop	r26
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	7f 91       	pop	r23
     b60:	6f 91       	pop	r22
     b62:	5f 91       	pop	r21
     b64:	4f 91       	pop	r20
     b66:	3f 91       	pop	r19
     b68:	2f 91       	pop	r18
     b6a:	0f 90       	pop	r0
     b6c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <__vector_4>:

ISR (PCINT1_vect){
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     b7e:	0f 92       	push	r0
     b80:	11 24       	eor	r1, r1
     b82:	2f 93       	push	r18
     b84:	3f 93       	push	r19
     b86:	4f 93       	push	r20
     b88:	5f 93       	push	r21
     b8a:	6f 93       	push	r22
     b8c:	7f 93       	push	r23
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	1f 92       	push	r1
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
			uint8_t return_value;
			if(PINC&(1 << PC0) == (1 << PC0)){
     ba4:	86 e2       	ldi	r24, 0x26	; 38
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	fc 01       	movw	r30, r24
     baa:	80 81       	ld	r24, Z
     bac:	88 2f       	mov	r24, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	81 70       	andi	r24, 0x01	; 1
     bb2:	99 27       	eor	r25, r25
     bb4:	89 2b       	or	r24, r25
     bb6:	c9 f5       	brne	.+114    	; 0xc2a <__vector_4+0xb4>
				return;
			}
			else if((DiskStrukture.sin_cos_counter > 2700)&&(DiskStrukture.enable_rotation)){
     bb8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <DiskStrukture+0x7>
     bbc:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <DiskStrukture+0x8>
     bc0:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <DiskStrukture+0x9>
     bc4:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <DiskStrukture+0xa>
     bc8:	8d 38       	cpi	r24, 0x8D	; 141
     bca:	9a 40       	sbci	r25, 0x0A	; 10
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	70 f1       	brcs	.+92     	; 0xc2e <__vector_4+0xb8>
     bd2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <DiskStrukture+0xb>
     bd6:	88 23       	and	r24, r24
     bd8:	51 f1       	breq	.+84     	; 0xc2e <__vector_4+0xb8>
				DiskStrukture.disk_present_counter++;
     bda:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <DiskStrukture+0x11>
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <DiskStrukture+0x11>
				return_value =  (PIND&0x07);							//m1,m2,m4
     be4:	89 e2       	ldi	r24, 0x29	; 41
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	87 70       	andi	r24, 0x07	; 7
     bee:	89 83       	std	Y+1, r24	; 0x01
				return_value |= (PIND&0x10)>>1;						//m8
     bf0:	89 e2       	ldi	r24, 0x29	; 41
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	fc 01       	movw	r30, r24
     bf6:	80 81       	ld	r24, Z
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	80 71       	andi	r24, 0x10	; 16
     bfe:	99 27       	eor	r25, r25
     c00:	95 95       	asr	r25
     c02:	87 95       	ror	r24
     c04:	98 2f       	mov	r25, r24
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	89 2b       	or	r24, r25
     c0a:	89 83       	std	Y+1, r24	; 0x01
				return_value = 15 - return_value;
     c0c:	9f e0       	ldi	r25, 0x0F	; 15
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	f9 2f       	mov	r31, r25
     c12:	f8 1b       	sub	r31, r24
     c14:	8f 2f       	mov	r24, r31
     c16:	89 83       	std	Y+1, r24	; 0x01
				if(DiskStrukture.new_position == return_value)
     c18:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <DiskStrukture+0xd>
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	98 17       	cp	r25, r24
     c20:	31 f4       	brne	.+12     	; 0xc2e <__vector_4+0xb8>
					disk_stop_rotation();
     c22:	0e 94 d7 01 	call	0x3ae	; 0x3ae <disk_stop_rotation>
			}
			return;
     c26:	00 00       	nop
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <__vector_4+0xb8>
}

ISR (PCINT1_vect){
			uint8_t return_value;
			if(PINC&(1 << PC0) == (1 << PC0)){
				return;
     c2a:	00 00       	nop
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <__vector_4+0xba>
				return_value |= (PIND&0x10)>>1;						//m8
				return_value = 15 - return_value;
				if(DiskStrukture.new_position == return_value)
					disk_stop_rotation();
			}
			return;
     c2e:	00 00       	nop
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <init_gpio>:
 *  Author: Andrii
 */ 

 #include "includes.h"

 void init_gpio(){
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
	/*init lift gpios*/
	DDRC &= ~(1 << DD3);									// end switch pin input
     c62:	87 e2       	ldi	r24, 0x27	; 39
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	27 e2       	ldi	r18, 0x27	; 39
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	27 7f       	andi	r18, 0xF7	; 247
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
	DDRC |= (1 << DD2);										// lift enable pin output
     c74:	87 e2       	ldi	r24, 0x27	; 39
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	27 e2       	ldi	r18, 0x27	; 39
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	f9 01       	movw	r30, r18
     c7e:	20 81       	ld	r18, Z
     c80:	24 60       	ori	r18, 0x04	; 4
     c82:	fc 01       	movw	r30, r24
     c84:	20 83       	st	Z, r18
	PORTC &= ~(1 << PORT2);								// lift enable pin off
     c86:	88 e2       	ldi	r24, 0x28	; 40
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	28 e2       	ldi	r18, 0x28	; 40
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	f9 01       	movw	r30, r18
     c90:	20 81       	ld	r18, Z
     c92:	2b 7f       	andi	r18, 0xFB	; 251
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18

	DDRB |= (1 << DD2);										//syc led pwm pin
     c98:	84 e2       	ldi	r24, 0x24	; 36
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	24 e2       	ldi	r18, 0x24	; 36
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	f9 01       	movw	r30, r18
     ca2:	20 81       	ld	r18, Z
     ca4:	24 60       	ori	r18, 0x04	; 4
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
	DDRB |= (1 << DD1);										// servo control pin output
     caa:	84 e2       	ldi	r24, 0x24	; 36
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	24 e2       	ldi	r18, 0x24	; 36
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	f9 01       	movw	r30, r18
     cb4:	20 81       	ld	r18, Z
     cb6:	22 60       	ori	r18, 0x02	; 2
     cb8:	fc 01       	movw	r30, r24
     cba:	20 83       	st	Z, r18
	DDRB |= (1 << DD0);										//direction signal pin
     cbc:	84 e2       	ldi	r24, 0x24	; 36
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	24 e2       	ldi	r18, 0x24	; 36
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	f9 01       	movw	r30, r18
     cc6:	20 81       	ld	r18, Z
     cc8:	21 60       	ori	r18, 0x01	; 1
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
	PORTB |= (1 << PB0);									//direction pin, any direction
     cce:	85 e2       	ldi	r24, 0x25	; 37
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	25 e2       	ldi	r18, 0x25	; 37
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	f9 01       	movw	r30, r18
     cd8:	20 81       	ld	r18, Z
     cda:	21 60       	ori	r18, 0x01	; 1
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
	PORTB &= ~(1 << PB1);									//servo control pin off
     ce0:	85 e2       	ldi	r24, 0x25	; 37
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	25 e2       	ldi	r18, 0x25	; 37
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	f9 01       	movw	r30, r18
     cea:	20 81       	ld	r18, Z
     cec:	2d 7f       	andi	r18, 0xFD	; 253
     cee:	fc 01       	movw	r30, r24
     cf0:	20 83       	st	Z, r18
	PORTB &= ~(1 << PB2);									//sync led pin off
     cf2:	85 e2       	ldi	r24, 0x25	; 37
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	25 e2       	ldi	r18, 0x25	; 37
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	f9 01       	movw	r30, r18
     cfc:	20 81       	ld	r18, Z
     cfe:	2b 7f       	andi	r18, 0xFB	; 251
     d00:	fc 01       	movw	r30, r24
     d02:	20 83       	st	Z, r18
	
	DDRD |= (1 << DD7);										//brake signal pin
     d04:	8a e2       	ldi	r24, 0x2A	; 42
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	2a e2       	ldi	r18, 0x2A	; 42
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	f9 01       	movw	r30, r18
     d0e:	20 81       	ld	r18, Z
     d10:	20 68       	ori	r18, 0x80	; 128
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18
	DDRD |= (1 << DD6);										//disk motor pin
     d16:	8a e2       	ldi	r24, 0x2A	; 42
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	2a e2       	ldi	r18, 0x2A	; 42
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	f9 01       	movw	r30, r18
     d20:	20 81       	ld	r18, Z
     d22:	20 64       	ori	r18, 0x40	; 64
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18
	DDRD |= (1 << DD5);										//cell motor pin
     d28:	8a e2       	ldi	r24, 0x2A	; 42
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	2a e2       	ldi	r18, 0x2A	; 42
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	f9 01       	movw	r30, r18
     d32:	20 81       	ld	r18, Z
     d34:	20 62       	ori	r18, 0x20	; 32
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18
	DDRD |= (1 << DD3);										//data led pwm pin
     d3a:	8a e2       	ldi	r24, 0x2A	; 42
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	2a e2       	ldi	r18, 0x2A	; 42
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	f9 01       	movw	r30, r18
     d44:	20 81       	ld	r18, Z
     d46:	28 60       	ori	r18, 0x08	; 8
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18

	PORTD |= (1 << PD7);									//brake pin on -> brake func off
     d4c:	8b e2       	ldi	r24, 0x2B	; 43
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	2b e2       	ldi	r18, 0x2B	; 43
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	f9 01       	movw	r30, r18
     d56:	20 81       	ld	r18, Z
     d58:	20 68       	ori	r18, 0x80	; 128
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18
	PORTD &= ~(1 << PD6);									//disk motor pin off		
     d5e:	8b e2       	ldi	r24, 0x2B	; 43
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	2b e2       	ldi	r18, 0x2B	; 43
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	f9 01       	movw	r30, r18
     d68:	20 81       	ld	r18, Z
     d6a:	2f 7b       	andi	r18, 0xBF	; 191
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 83       	st	Z, r18
	PORTD &= ~(1 << PD5);									//cell motor pin off
     d70:	8b e2       	ldi	r24, 0x2B	; 43
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	2b e2       	ldi	r18, 0x2B	; 43
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	2f 7d       	andi	r18, 0xDF	; 223
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
	PORTD &= ~(1 << PD3);									//data led pin off
     d82:	8b e2       	ldi	r24, 0x2B	; 43
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	2b e2       	ldi	r18, 0x2B	; 43
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	20 81       	ld	r18, Z
     d8e:	27 7f       	andi	r18, 0xF7	; 247
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18

     d94:	00 00       	nop
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <init_twi>:
volatile uint8_t twi_buffer[TWI_BUFFER_SIZE];
volatile uint8_t temp_buffer[TWI_BUFFER_SIZE];
volatile uint8_t twi_input_ptr;
volatile uint8_t twi_output_ptr;

void init_twi(void){
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x48; // SCL=50kHz [p.235,216]
     da4:	88 eb       	ldi	r24, 0xB8	; 184
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	28 e4       	ldi	r18, 0x48	; 72
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
	TWCR = 0x00;
     dae:	8c eb       	ldi	r24, 0xBC	; 188
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	fc 01       	movw	r30, r24
     db4:	10 82       	st	Z, r1
	TWAR = TWI_ADDRESS;
     db6:	8a eb       	ldi	r24, 0xBA	; 186
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	20 e7       	ldi	r18, 0x70	; 112
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 83       	st	Z, r18
	TWSR = 0x00;
     dc0:	89 eb       	ldi	r24, 0xB9	; 185
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	10 82       	st	Z, r1
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     dc8:	8c eb       	ldi	r24, 0xBC	; 188
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	25 ec       	ldi	r18, 0xC5	; 197
     dce:	fc 01       	movw	r30, r24
     dd0:	20 83       	st	Z, r18
}
     dd2:	00 00       	nop
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <calculate_checksum>:

uint8_t calculate_checksum(uint8_t length,volatile uint8_t* data){
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <calculate_checksum+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <calculate_checksum+0x8>
     de2:	1f 92       	push	r1
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	8b 83       	std	Y+3, r24	; 0x03
     dea:	7d 83       	std	Y+5, r23	; 0x05
     dec:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t crc = 0;
     dee:	19 82       	std	Y+1, r1	; 0x01
	for(uint8_t i = 0; i < length; i++)
     df0:	1a 82       	std	Y+2, r1	; 0x02
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <calculate_checksum+0x38>
	crc += data[i];
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	2c 81       	ldd	r18, Y+4	; 0x04
     dfc:	3d 81       	ldd	r19, Y+5	; 0x05
     dfe:	82 0f       	add	r24, r18
     e00:	93 1f       	adc	r25, r19
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	99 81       	ldd	r25, Y+1	; 0x01
     e08:	89 0f       	add	r24, r25
     e0a:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
}

uint8_t calculate_checksum(uint8_t length,volatile uint8_t* data){
	uint8_t crc = 0;
	for(uint8_t i = 0; i < length; i++)
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	8a 83       	std	Y+2, r24	; 0x02
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	98 17       	cp	r25, r24
     e18:	68 f3       	brcs	.-38     	; 0xdf4 <calculate_checksum+0x1a>
	crc += data[i];
	return crc;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <prepare_output_buffer>:

void prepare_output_buffer(uint8_t command, uint8_t status, uint8_t length, uint8_t* data){
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	27 97       	sbiw	r28, 0x07	; 7
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	6c 83       	std	Y+4, r22	; 0x04
     e44:	4d 83       	std	Y+5, r20	; 0x05
     e46:	3f 83       	std	Y+7, r19	; 0x07
     e48:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t crc = 0;
     e4a:	19 82       	std	Y+1, r1	; 0x01
	memset(twi_buffer,0x00,TWI_BUFFER_SIZE);
     e4c:	46 e9       	ldi	r20, 0x96	; 150
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	80 e4       	ldi	r24, 0x40	; 64
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <memset>
	twi_buffer[0] = status;
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <twi_buffer>
	twi_buffer[1] = command;
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <twi_buffer+0x1>
	memcpy(&twi_buffer[2],data,length);
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	a9 01       	movw	r20, r18
     e74:	bc 01       	movw	r22, r24
     e76:	82 e4       	ldi	r24, 0x42	; 66
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <memcpy>
	for(uint8_t i = 0; i < length + 2; i++)
     e7e:	1a 82       	std	Y+2, r1	; 0x02
     e80:	0d c0       	rjmp	.+26     	; 0xe9c <prepare_output_buffer+0x70>
	crc += twi_buffer[i];
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	80 5c       	subi	r24, 0xC0	; 192
     e8a:	9e 4f       	sbci	r25, 0xFE	; 254
     e8c:	fc 01       	movw	r30, r24
     e8e:	80 81       	ld	r24, Z
     e90:	99 81       	ldd	r25, Y+1	; 0x01
     e92:	89 0f       	add	r24, r25
     e94:	89 83       	std	Y+1, r24	; 0x01
	uint8_t crc = 0;
	memset(twi_buffer,0x00,TWI_BUFFER_SIZE);
	twi_buffer[0] = status;
	twi_buffer[1] = command;
	memcpy(&twi_buffer[2],data,length);
	for(uint8_t i = 0; i < length + 2; i++)
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	8a 83       	std	Y+2, r24	; 0x02
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 96       	adiw	r24, 0x02	; 2
     eaa:	28 17       	cp	r18, r24
     eac:	39 07       	cpc	r19, r25
     eae:	4c f3       	brlt	.-46     	; 0xe82 <prepare_output_buffer+0x56>
	crc += twi_buffer[i];
	crc = (uint8_t)(0 - crc);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	81 95       	neg	r24
     eb4:	89 83       	std	Y+1, r24	; 0x01
	twi_buffer[length + 2] = crc;
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 96       	adiw	r24, 0x02	; 2
     ebe:	80 5c       	subi	r24, 0xC0	; 192
     ec0:	9e 4f       	sbci	r25, 0xFE	; 254
     ec2:	29 81       	ldd	r18, Y+1	; 0x01
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
}
     ec8:	00 00       	nop
     eca:	27 96       	adiw	r28, 0x07	; 7
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <twi_engine>:

void twi_engine(){
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <twi_engine+0x6>
     ee2:	1f 92       	push	r1
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
	uint8_t status = STATUS_OK;
     ee8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t tx_length = 0;
     eea:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t twi_command;
	uint8_t twi_crc;
	twi_command = twi_buffer[0];
     eec:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <twi_buffer>
     ef0:	8b 83       	std	Y+3, r24	; 0x03
	if(calculate_checksum(twi_input_ptr,twi_buffer) != 0)
     ef2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twi_input_ptr>
     ef6:	60 e4       	ldi	r22, 0x40	; 64
     ef8:	71 e0       	ldi	r23, 0x01	; 1
     efa:	0e 94 ed 06 	call	0xdda	; 0xdda <calculate_checksum>
     efe:	88 23       	and	r24, r24
     f00:	19 f0       	breq	.+6      	; 0xf08 <twi_engine+0x2c>
		status|=STATUS_CRC_ERR;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	89 83       	std	Y+1, r24	; 0x01
	if(status != STATUS_OK){
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	88 23       	and	r24, r24
     f0c:	41 f0       	breq	.+16     	; 0xf1e <twi_engine+0x42>
		prepare_output_buffer(twi_command,status,tx_length,temp_buffer);
     f0e:	26 ed       	ldi	r18, 0xD6	; 214
     f10:	31 e0       	ldi	r19, 0x01	; 1
     f12:	4a 81       	ldd	r20, Y+2	; 0x02
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	0e 94 16 07 	call	0xe2c	; 0xe2c <prepare_output_buffer>
		return;
     f1c:	87 c0       	rjmp	.+270    	; 0x102c <twi_engine+0x150>
	}
	switch(twi_command){
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	91 05       	cpc	r25, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <twi_engine+0x50>
     f2a:	3e c0       	rjmp	.+124    	; 0xfa8 <twi_engine+0xcc>
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	91 05       	cpc	r25, r1
     f30:	2c f4       	brge	.+10     	; 0xf3c <twi_engine+0x60>
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	79 f0       	breq	.+30     	; 0xf54 <twi_engine+0x78>
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f0       	breq	.+60     	; 0xf76 <twi_engine+0x9a>
     f3a:	6c c0       	rjmp	.+216    	; 0x1014 <twi_engine+0x138>
     f3c:	84 30       	cpi	r24, 0x04	; 4
     f3e:	91 05       	cpc	r25, r1
     f40:	09 f4       	brne	.+2      	; 0xf44 <twi_engine+0x68>
     f42:	53 c0       	rjmp	.+166    	; 0xfea <twi_engine+0x10e>
     f44:	84 30       	cpi	r24, 0x04	; 4
     f46:	91 05       	cpc	r25, r1
     f48:	0c f4       	brge	.+2      	; 0xf4c <twi_engine+0x70>
     f4a:	42 c0       	rjmp	.+132    	; 0xfd0 <twi_engine+0xf4>
     f4c:	05 97       	sbiw	r24, 0x05	; 5
     f4e:	09 f4       	brne	.+2      	; 0xf52 <twi_engine+0x76>
     f50:	59 c0       	rjmp	.+178    	; 0x1004 <twi_engine+0x128>
     f52:	60 c0       	rjmp	.+192    	; 0x1014 <twi_engine+0x138>
		case CAR_GET_ID:
			if(twi_input_ptr != 2){
     f54:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twi_input_ptr>
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	21 f0       	breq	.+8      	; 0xf64 <twi_engine+0x88>
				status|=STATUS_WRONG_LENGTH;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	80 61       	ori	r24, 0x10	; 16
     f60:	89 83       	std	Y+1, r24	; 0x01
				break;
     f62:	5d c0       	rjmp	.+186    	; 0x101e <twi_engine+0x142>
			}
			strcpy((char*)temp_buffer,ID);
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	71 e0       	ldi	r23, 0x01	; 1
     f68:	86 ed       	ldi	r24, 0xD6	; 214
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <strcpy>
			tx_length = 128;
     f70:	80 e8       	ldi	r24, 0x80	; 128
     f72:	8a 83       	std	Y+2, r24	; 0x02
			break;
     f74:	54 c0       	rjmp	.+168    	; 0x101e <twi_engine+0x142>
		case CAR_GET_STATUS:
			if(twi_input_ptr != 2){
     f76:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twi_input_ptr>
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	21 f0       	breq	.+8      	; 0xf86 <twi_engine+0xaa>
				status|=STATUS_WRONG_LENGTH;
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	80 61       	ori	r24, 0x10	; 16
     f82:	89 83       	std	Y+1, r24	; 0x01
				break;
     f84:	4c c0       	rjmp	.+152    	; 0x101e <twi_engine+0x142>
			}
			temp_buffer[0] = (uint8_t)get_cell_state();	 // cell_rotator_state;
     f86:	0e 94 9f 00 	call	0x13e	; 0x13e <get_cell_state>
     f8a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <temp_buffer>
			temp_buffer[1] = (uint8_t)get_lift_state();	// lift_state;
     f8e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <get_lift_state>
     f92:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <temp_buffer+0x1>
			temp_buffer[2] = (uint8_t)get_disk_state();	// table_rotator_state;
     f96:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <get_disk_state>
     f9a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <temp_buffer+0x2>
			temp_buffer[3] = 0;
     f9e:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <temp_buffer+0x3>
			tx_length = 4;
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	8a 83       	std	Y+2, r24	; 0x02
			break;
     fa6:	3b c0       	rjmp	.+118    	; 0x101e <twi_engine+0x142>
		case CAR_CELL_ROTATOR_POSITION:
			if((twi_input_ptr != (2 + 2))){
     fa8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twi_input_ptr>
     fac:	84 30       	cpi	r24, 0x04	; 4
     fae:	21 f0       	breq	.+8      	; 0xfb8 <twi_engine+0xdc>
				status|=STATUS_WRONG_LENGTH;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	80 61       	ori	r24, 0x10	; 16
     fb4:	89 83       	std	Y+1, r24	; 0x01
				break;
     fb6:	33 c0       	rjmp	.+102    	; 0x101e <twi_engine+0x142>
			}
			cell_update_control_values((bool)twi_buffer[1], twi_buffer[2]);
     fb8:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <twi_buffer+0x2>
     fbc:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <twi_buffer+0x1>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	99 23       	and	r25, r25
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <twi_engine+0xec>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	62 2f       	mov	r22, r18
     fca:	0e 94 68 00 	call	0xd0	; 0xd0 <cell_update_control_values>
			break;
     fce:	27 c0       	rjmp	.+78     	; 0x101e <twi_engine+0x142>
		case CAR_LIFT_UP_DOWN:
			if(twi_input_ptr != 3){
     fd0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twi_input_ptr>
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	21 f0       	breq	.+8      	; 0xfe0 <twi_engine+0x104>
				status|=STATUS_WRONG_LENGTH;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	80 61       	ori	r24, 0x10	; 16
     fdc:	89 83       	std	Y+1, r24	; 0x01
				break;
     fde:	1f c0       	rjmp	.+62     	; 0x101e <twi_engine+0x142>
			}
			set_new_lift_position((tLiftCommandPosition)twi_buffer[1]);
     fe0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <twi_buffer+0x1>
     fe4:	0e 94 3d 09 	call	0x127a	; 0x127a <set_new_lift_position>
			break;
     fe8:	1a c0       	rjmp	.+52     	; 0x101e <twi_engine+0x142>
		case CAR_SET_POSITION:
			if(twi_input_ptr != 4){
     fea:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twi_input_ptr>
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	21 f0       	breq	.+8      	; 0xffa <twi_engine+0x11e>
				status|=STATUS_WRONG_LENGTH;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	80 61       	ori	r24, 0x10	; 16
     ff6:	89 83       	std	Y+1, r24	; 0x01
				break;
     ff8:	12 c0       	rjmp	.+36     	; 0x101e <twi_engine+0x142>
			}
			disk_set_new_position(twi_buffer[1]);
     ffa:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <twi_buffer+0x1>
     ffe:	0e 94 fd 01 	call	0x3fa	; 0x3fa <disk_set_new_position>
			break;
    1002:	0d c0       	rjmp	.+26     	; 0x101e <twi_engine+0x142>
		case CAR_SET_SPEED:
			if(twi_input_ptr != 5){
    1004:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twi_input_ptr>
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	41 f0       	breq	.+16     	; 0x101c <twi_engine+0x140>
				status|=STATUS_WRONG_LENGTH;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	80 61       	ori	r24, 0x10	; 16
    1010:	89 83       	std	Y+1, r24	; 0x01
				break;
    1012:	05 c0       	rjmp	.+10     	; 0x101e <twi_engine+0x142>
			}
			break;
		default:
			status|=STATUS_WRONG_COMMAND;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	89 83       	std	Y+1, r24	; 0x01
			break;
    101a:	01 c0       	rjmp	.+2      	; 0x101e <twi_engine+0x142>
		case CAR_SET_SPEED:
			if(twi_input_ptr != 5){
				status|=STATUS_WRONG_LENGTH;
				break;
			}
			break;
    101c:	00 00       	nop
		default:
			status|=STATUS_WRONG_COMMAND;
			break;
	}
	prepare_output_buffer(twi_command,status,tx_length,temp_buffer);
    101e:	26 ed       	ldi	r18, 0xD6	; 214
    1020:	31 e0       	ldi	r19, 0x01	; 1
    1022:	4a 81       	ldd	r20, Y+2	; 0x02
    1024:	69 81       	ldd	r22, Y+1	; 0x01
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	0e 94 16 07 	call	0xe2c	; 0xe2c <prepare_output_buffer>
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <__vector_24>:

ISR (TWI_vect)
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	4f 93       	push	r20
    104a:	5f 93       	push	r21
    104c:	6f 93       	push	r22
    104e:	7f 93       	push	r23
    1050:	8f 93       	push	r24
    1052:	9f 93       	push	r25
    1054:	af 93       	push	r26
    1056:	bf 93       	push	r27
    1058:	ef 93       	push	r30
    105a:	ff 93       	push	r31
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	switch(TWSR)
    1064:	89 eb       	ldi	r24, 0xB9	; 185
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	fc 01       	movw	r30, r24
    106a:	80 81       	ld	r24, Z
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	80 3a       	cpi	r24, 0xA0	; 160
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <__vector_24+0x40>
    1076:	51 c0       	rjmp	.+162    	; 0x111a <__vector_24+0xe2>
    1078:	81 3a       	cpi	r24, 0xA1	; 161
    107a:	91 05       	cpc	r25, r1
    107c:	8c f4       	brge	.+34     	; 0x10a0 <__vector_24+0x68>
    107e:	80 36       	cpi	r24, 0x60	; 96
    1080:	91 05       	cpc	r25, r1
    1082:	29 f1       	breq	.+74     	; 0x10ce <__vector_24+0x96>
    1084:	81 36       	cpi	r24, 0x61	; 97
    1086:	91 05       	cpc	r25, r1
    1088:	24 f4       	brge	.+8      	; 0x1092 <__vector_24+0x5a>
    108a:	89 2b       	or	r24, r25
    108c:	09 f4       	brne	.+2      	; 0x1090 <__vector_24+0x58>
    108e:	87 c0       	rjmp	.+270    	; 0x119e <__vector_24+0x166>
    1090:	8c c0       	rjmp	.+280    	; 0x11aa <__vector_24+0x172>
    1092:	88 36       	cpi	r24, 0x68	; 104
    1094:	91 05       	cpc	r25, r1
    1096:	d9 f0       	breq	.+54     	; 0x10ce <__vector_24+0x96>
    1098:	80 38       	cpi	r24, 0x80	; 128
    109a:	91 05       	cpc	r25, r1
    109c:	41 f1       	breq	.+80     	; 0x10ee <__vector_24+0xb6>
    109e:	85 c0       	rjmp	.+266    	; 0x11aa <__vector_24+0x172>
    10a0:	88 3b       	cpi	r24, 0xB8	; 184
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <__vector_24+0x70>
    10a6:	59 c0       	rjmp	.+178    	; 0x115a <__vector_24+0x122>
    10a8:	89 3b       	cpi	r24, 0xB9	; 185
    10aa:	91 05       	cpc	r25, r1
    10ac:	3c f4       	brge	.+14     	; 0x10bc <__vector_24+0x84>
    10ae:	88 3a       	cpi	r24, 0xA8	; 168
    10b0:	91 05       	cpc	r25, r1
    10b2:	d9 f1       	breq	.+118    	; 0x112a <__vector_24+0xf2>
    10b4:	80 3b       	cpi	r24, 0xB0	; 176
    10b6:	91 05       	cpc	r25, r1
    10b8:	c1 f1       	breq	.+112    	; 0x112a <__vector_24+0xf2>
    10ba:	77 c0       	rjmp	.+238    	; 0x11aa <__vector_24+0x172>
    10bc:	80 3c       	cpi	r24, 0xC0	; 192
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <__vector_24+0x8c>
    10c2:	61 c0       	rjmp	.+194    	; 0x1186 <__vector_24+0x14e>
    10c4:	88 3c       	cpi	r24, 0xC8	; 200
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <__vector_24+0x94>
    10ca:	63 c0       	rjmp	.+198    	; 0x1192 <__vector_24+0x15a>
    10cc:	6e c0       	rjmp	.+220    	; 0x11aa <__vector_24+0x172>
	{
		case 0x68:
		case 0x60:
		twi_input_ptr = 0;
    10ce:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <twi_input_ptr>
		memset(twi_buffer,0,TWI_BUFFER_SIZE);
    10d2:	46 e9       	ldi	r20, 0x96	; 150
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e4       	ldi	r24, 0x40	; 64
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <memset>
		TWCR = (1 << TWEA)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    10e2:	8c eb       	ldi	r24, 0xBC	; 188
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	25 ec       	ldi	r18, 0xC5	; 197
    10e8:	fc 01       	movw	r30, r24
    10ea:	20 83       	st	Z, r18
		return;
    10ec:	63 c0       	rjmp	.+198    	; 0x11b4 <__vector_24+0x17c>
		case 0x80:
		*(twi_buffer + twi_input_ptr++) = TWDR;
    10ee:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twi_input_ptr>
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	98 0f       	add	r25, r24
    10f6:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <twi_input_ptr>
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	80 5c       	subi	r24, 0xC0	; 192
    1100:	9e 4f       	sbci	r25, 0xFE	; 254
    1102:	2b eb       	ldi	r18, 0xBB	; 187
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	f9 01       	movw	r30, r18
    1108:	20 81       	ld	r18, Z
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
		TWCR = (1 << TWEA)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    110e:	8c eb       	ldi	r24, 0xBC	; 188
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	25 ec       	ldi	r18, 0xC5	; 197
    1114:	fc 01       	movw	r30, r24
    1116:	20 83       	st	Z, r18
		return;
    1118:	4d c0       	rjmp	.+154    	; 0x11b4 <__vector_24+0x17c>
		case 0xA0:
		twi_engine();
    111a:	0e 94 6e 07 	call	0xedc	; 0xedc <twi_engine>
		TWCR = (1 << TWEA)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    111e:	8c eb       	ldi	r24, 0xBC	; 188
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	25 ec       	ldi	r18, 0xC5	; 197
    1124:	fc 01       	movw	r30, r24
    1126:	20 83       	st	Z, r18
		return;
    1128:	45 c0       	rjmp	.+138    	; 0x11b4 <__vector_24+0x17c>
		case 0xA8:
		case 0xB0:
		twi_output_ptr = 0;
    112a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <twi_output_ptr>
		TWDR = *(twi_buffer + twi_output_ptr++);
    112e:	8b eb       	ldi	r24, 0xBB	; 187
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <twi_output_ptr>
    1136:	31 e0       	ldi	r19, 0x01	; 1
    1138:	32 0f       	add	r19, r18
    113a:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <twi_output_ptr>
    113e:	22 2f       	mov	r18, r18
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	20 5c       	subi	r18, 0xC0	; 192
    1144:	3e 4f       	sbci	r19, 0xFE	; 254
    1146:	f9 01       	movw	r30, r18
    1148:	20 81       	ld	r18, Z
    114a:	fc 01       	movw	r30, r24
    114c:	20 83       	st	Z, r18
		TWCR = (1 << TWEA)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    114e:	8c eb       	ldi	r24, 0xBC	; 188
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	25 ec       	ldi	r18, 0xC5	; 197
    1154:	fc 01       	movw	r30, r24
    1156:	20 83       	st	Z, r18
		return;
    1158:	2d c0       	rjmp	.+90     	; 0x11b4 <__vector_24+0x17c>
		case 0xB8:
		TWDR = *(twi_buffer + twi_output_ptr++);
    115a:	8b eb       	ldi	r24, 0xBB	; 187
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <twi_output_ptr>
    1162:	31 e0       	ldi	r19, 0x01	; 1
    1164:	32 0f       	add	r19, r18
    1166:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <twi_output_ptr>
    116a:	22 2f       	mov	r18, r18
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	20 5c       	subi	r18, 0xC0	; 192
    1170:	3e 4f       	sbci	r19, 0xFE	; 254
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
		TWCR = (1 << TWEA)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    117a:	8c eb       	ldi	r24, 0xBC	; 188
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	25 ec       	ldi	r18, 0xC5	; 197
    1180:	fc 01       	movw	r30, r24
    1182:	20 83       	st	Z, r18
		return;
    1184:	17 c0       	rjmp	.+46     	; 0x11b4 <__vector_24+0x17c>
		case 0xC0:
		TWCR = (1 << TWEA)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    1186:	8c eb       	ldi	r24, 0xBC	; 188
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	25 ec       	ldi	r18, 0xC5	; 197
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18
		return;
    1190:	11 c0       	rjmp	.+34     	; 0x11b4 <__vector_24+0x17c>
		case 0xC8:
		TWCR = (1 << TWEA)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    1192:	8c eb       	ldi	r24, 0xBC	; 188
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	25 ec       	ldi	r18, 0xC5	; 197
    1198:	fc 01       	movw	r30, r24
    119a:	20 83       	st	Z, r18
		return;
    119c:	0b c0       	rjmp	.+22     	; 0x11b4 <__vector_24+0x17c>
		case 0x00:
		TWCR = (1 << TWEA)|(0 << TWSTA)|(1 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    119e:	8c eb       	ldi	r24, 0xBC	; 188
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	25 ed       	ldi	r18, 0xD5	; 213
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
		return;
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <__vector_24+0x17c>
		default:
		TWCR = (1 << TWEA)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWWC)|(1 << TWEN)|(1 << TWIE)|(1 << TWINT);
    11aa:	8c eb       	ldi	r24, 0xBC	; 188
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	25 ec       	ldi	r18, 0xC5	; 197
    11b0:	fc 01       	movw	r30, r24
    11b2:	20 83       	st	Z, r18
	}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <init_lift_pwm>:
	return LiftStructure.state;
}

tLiftStructure get_lift_structure(){
	return LiftStructure;
}
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	80 e8       	ldi	r24, 0x80	; 128
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	20 e8       	ldi	r18, 0x80	; 128
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	f9 01       	movw	r30, r18
    11ee:	20 81       	ld	r18, Z
    11f0:	23 6c       	ori	r18, 0xC3	; 195
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 83       	st	Z, r18
    11f6:	81 e8       	ldi	r24, 0x81	; 129
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	21 e8       	ldi	r18, 0x81	; 129
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	f9 01       	movw	r30, r18
    1200:	20 81       	ld	r18, Z
    1202:	23 60       	ori	r18, 0x03	; 3
    1204:	fc 01       	movw	r30, r24
    1206:	20 83       	st	Z, r18
    1208:	88 e8       	ldi	r24, 0x88	; 136
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	fc 01       	movw	r30, r24
    120e:	11 82       	std	Z+1, r1	; 0x01
    1210:	10 82       	st	Z, r1
    1212:	00 00       	nop
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <get_lift_position>:
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	86 e2       	ldi	r24, 0x26	; 38
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	fc 01       	movw	r30, r24
    1228:	80 81       	ld	r24, Z
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	88 70       	andi	r24, 0x08	; 8
    1230:	99 27       	eor	r25, r25
    1232:	89 2b       	or	r24, r25
    1234:	11 f0       	breq	.+4      	; 0x123a <get_lift_position+0x20>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	01 c0       	rjmp	.+2      	; 0x123c <get_lift_position+0x22>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <init_lift>:
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <init_lift_pwm>
    124e:	0e 94 0d 09 	call	0x121a	; 0x121a <get_lift_position>
    1252:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <LiftStructure+0x1>
    1256:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <LiftStructure+0x1>
    125a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <LiftStructure+0x2>
    125e:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <LiftStructure+0x3>
    1262:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <LiftStructure+0x5>
    1266:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <LiftStructure+0x4>
    126a:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <LiftStructure>
    126e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <LiftStructure+0x6>
    1272:	00 00       	nop
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <set_new_lift_position>:
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	1f 92       	push	r1
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <LiftStructure+0x2>
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <LiftStructure+0x3>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <LiftStructure+0x6>
    1298:	00 00       	nop
    129a:	0f 90       	pop	r0
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <lift_isr_routine>:
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <LiftStructure+0x6>
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	91 05       	cpc	r25, r1
    12b6:	e9 f0       	breq	.+58     	; 0x12f2 <lift_isr_routine+0x50>
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	34 f4       	brge	.+12     	; 0x12ca <lift_isr_routine+0x28>
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <lift_isr_routine+0x22>
    12c2:	88 c0       	rjmp	.+272    	; 0x13d4 <lift_isr_routine+0x132>
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	59 f0       	breq	.+22     	; 0x12de <lift_isr_routine+0x3c>
    12c8:	75 c0       	rjmp	.+234    	; 0x13b4 <lift_isr_routine+0x112>
    12ca:	84 30       	cpi	r24, 0x04	; 4
    12cc:	91 05       	cpc	r25, r1
    12ce:	e1 f1       	breq	.+120    	; 0x1348 <lift_isr_routine+0xa6>
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	91 05       	cpc	r25, r1
    12d4:	64 f1       	brlt	.+88     	; 0x132e <lift_isr_routine+0x8c>
    12d6:	05 97       	sbiw	r24, 0x05	; 5
    12d8:	09 f4       	brne	.+2      	; 0x12dc <lift_isr_routine+0x3a>
    12da:	7c c0       	rjmp	.+248    	; 0x13d4 <lift_isr_routine+0x132>
    12dc:	6b c0       	rjmp	.+214    	; 0x13b4 <lift_isr_routine+0x112>
    12de:	80 ed       	ldi	r24, 0xD0	; 208
    12e0:	97 e0       	ldi	r25, 0x07	; 7
    12e2:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <LiftStructure+0x5>
    12e6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <LiftStructure+0x4>
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <LiftStructure+0x6>
    12f0:	61 c0       	rjmp	.+194    	; 0x13b4 <lift_isr_routine+0x112>
    12f2:	0e 94 0d 09 	call	0x121a	; 0x121a <get_lift_position>
    12f6:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <LiftStructure+0x1>
    12fa:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <LiftStructure+0x1>
    12fe:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <LiftStructure+0x2>
    1302:	98 17       	cp	r25, r24
    1304:	21 f0       	breq	.+8      	; 0x130e <lift_isr_routine+0x6c>
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <LiftStructure+0x6>
    130c:	53 c0       	rjmp	.+166    	; 0x13b4 <lift_isr_routine+0x112>
    130e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <LiftStructure+0x2>
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	21 f4       	brne	.+8      	; 0x131e <lift_isr_routine+0x7c>
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <LiftStructure>
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <lift_isr_routine+0x82>
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <LiftStructure>
    1324:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <LiftStructure+0x3>
    1328:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <LiftStructure+0x6>
    132c:	43 c0       	rjmp	.+134    	; 0x13b4 <lift_isr_routine+0x112>
    132e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <LiftStructure+0x2>
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	19 f4       	brne	.+6      	; 0x133c <lift_isr_routine+0x9a>
    1336:	0e 94 16 0a 	call	0x142c	; 0x142c <set_lift_position_up>
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <lift_isr_routine+0x9e>
    133c:	0e 94 2e 0a 	call	0x145c	; 0x145c <set_lift_position_down>
    1340:	84 e0       	ldi	r24, 0x04	; 4
    1342:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <LiftStructure+0x6>
    1346:	36 c0       	rjmp	.+108    	; 0x13b4 <lift_isr_routine+0x112>
    1348:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <LiftStructure+0x4>
    134c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <LiftStructure+0x5>
    1350:	87 3d       	cpi	r24, 0xD7	; 215
    1352:	96 40       	sbci	r25, 0x06	; 6
    1354:	60 f5       	brcc	.+88     	; 0x13ae <lift_isr_routine+0x10c>
    1356:	0e 94 0d 09 	call	0x121a	; 0x121a <get_lift_position>
    135a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <LiftStructure+0x1>
    135e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <LiftStructure+0x1>
    1362:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <LiftStructure+0x2>
    1366:	98 17       	cp	r25, r24
    1368:	89 f4       	brne	.+34     	; 0x138c <lift_isr_routine+0xea>
    136a:	0e 94 00 0a 	call	0x1400	; 0x1400 <disable_lift>
    136e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <LiftStructure+0x2>
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	21 f4       	brne	.+8      	; 0x137e <lift_isr_routine+0xdc>
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <LiftStructure>
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <lift_isr_routine+0xe2>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <LiftStructure>
    1384:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <LiftStructure+0x3>
    1388:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <LiftStructure+0x6>
    138c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <LiftStructure+0x4>
    1390:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <LiftStructure+0x5>
    1394:	89 2b       	or	r24, r25
    1396:	69 f4       	brne	.+26     	; 0x13b2 <lift_isr_routine+0x110>
    1398:	0e 94 00 0a 	call	0x1400	; 0x1400 <disable_lift>
    139c:	83 e0       	ldi	r24, 0x03	; 3
    139e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <LiftStructure>
    13a2:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <LiftStructure+0x3>
    13a6:	85 e0       	ldi	r24, 0x05	; 5
    13a8:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <LiftStructure+0x6>
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <lift_isr_routine+0x110>
    13ae:	00 00       	nop
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <lift_isr_routine+0x112>
    13b2:	00 00       	nop
    13b4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <LiftStructure+0x4>
    13b8:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <LiftStructure+0x5>
    13bc:	89 2b       	or	r24, r25
    13be:	59 f0       	breq	.+22     	; 0x13d6 <lift_isr_routine+0x134>
    13c0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <LiftStructure+0x4>
    13c4:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <LiftStructure+0x5>
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <LiftStructure+0x5>
    13ce:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <LiftStructure+0x4>
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <lift_isr_routine+0x134>
    13d4:	00 00       	nop
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	08 95       	ret

000013dc <check_lift_bussy>:
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <LiftStructure+0x3>
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <get_lift_state>:
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <LiftStructure>
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <disable_lift>:

void disable_lift(){
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	OCR1A = 0;
    1408:	88 e8       	ldi	r24, 0x88	; 136
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	fc 01       	movw	r30, r24
    140e:	11 82       	std	Z+1, r1	; 0x01
    1410:	10 82       	st	Z, r1
	PORTC &= ~(1 << PORT2);											// lift enable pwm pin off
    1412:	88 e2       	ldi	r24, 0x28	; 40
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	28 e2       	ldi	r18, 0x28	; 40
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	f9 01       	movw	r30, r18
    141c:	20 81       	ld	r18, Z
    141e:	2b 7f       	andi	r18, 0xFB	; 251
    1420:	fc 01       	movw	r30, r24
    1422:	20 83       	st	Z, r18
}
    1424:	00 00       	nop
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <set_lift_position_up>:

#ifdef FUTABA_S3003
void set_lift_position_up(){
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	OCR1A = 50;
    1434:	88 e8       	ldi	r24, 0x88	; 136
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	22 e3       	ldi	r18, 0x32	; 50
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	fc 01       	movw	r30, r24
    143e:	31 83       	std	Z+1, r19	; 0x01
    1440:	20 83       	st	Z, r18
	PORTC |= (1 << PORT2);											// lift enable pwm pin on
    1442:	88 e2       	ldi	r24, 0x28	; 40
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	28 e2       	ldi	r18, 0x28	; 40
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	f9 01       	movw	r30, r18
    144c:	20 81       	ld	r18, Z
    144e:	24 60       	ori	r18, 0x04	; 4
    1450:	fc 01       	movw	r30, r24
    1452:	20 83       	st	Z, r18
}
    1454:	00 00       	nop
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <set_lift_position_down>:
	PORTC |= (1 << PORT2);											// lift enable pwm pin on
}
#endif

#ifdef FUTABA_S3003
void set_lift_position_down(){
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	OCR1A = 135;
    1464:	88 e8       	ldi	r24, 0x88	; 136
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	27 e8       	ldi	r18, 0x87	; 135
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	fc 01       	movw	r30, r24
    146e:	31 83       	std	Z+1, r19	; 0x01
    1470:	20 83       	st	Z, r18
	PORTC |= (1 << PORT2);											// lift enable pwm pin on
    1472:	88 e2       	ldi	r24, 0x28	; 40
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	28 e2       	ldi	r18, 0x28	; 40
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	f9 01       	movw	r30, r18
    147c:	20 81       	ld	r18, Z
    147e:	24 60       	ori	r18, 0x04	; 4
    1480:	fc 01       	movw	r30, r24
    1482:	20 83       	st	Z, r18
}
    1484:	00 00       	nop
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <main>:

static void init_clock();
volatile uint8_t data;
volatile uint32_t sin1;

int main(void){
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	init_clock();
    1494:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <init_clock>
	init_gpio();
    1498:	0e 94 2d 06 	call	0xc5a	; 0xc5a <init_gpio>
	init_lift();
    149c:	0e 94 21 09 	call	0x1242	; 0x1242 <init_lift>
	init_cell();
    14a0:	0e 94 5c 00 	call	0xb8	; 0xb8 <init_cell>
	init_disk();
    14a4:	0e 94 16 01 	call	0x22c	; 0x22c <init_disk>
	init_timers();
    14a8:	0e 94 81 0a 	call	0x1502	; 0x1502 <init_timers>
	init_twi();
    14ac:	0e 94 ce 06 	call	0xd9c	; 0xd9c <init_twi>
	sei();
    14b0:	78 94       	sei
	cell_update_control_values(true, 100);
    14b2:	64 e6       	ldi	r22, 0x64	; 100
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	0e 94 68 00 	call	0xd0	; 0xd0 <cell_update_control_values>
	/*if disk stuck - up for 5 seconds*/
	set_new_lift_position(LiftCommandUp);
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	0e 94 3d 09 	call	0x127a	; 0x127a <set_new_lift_position>
	m_delay_ms(5000);
    14c0:	68 e8       	ldi	r22, 0x88	; 136
    14c2:	73 e1       	ldi	r23, 0x13	; 19
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <m_delay_ms>
	set_new_lift_position(LiftCommandDown);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 3d 09 	call	0x127a	; 0x127a <set_new_lift_position>
	init_disk_power_on_value();
    14d2:	0e 94 41 01 	call	0x282	; 0x282 <init_disk_power_on_value>

	while (true){

	}
    14d6:	ff cf       	rjmp	.-2      	; 0x14d6 <main+0x4a>

000014d8 <init_clock>:
}

void init_clock(){
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	MCUCR = 0;
    14e0:	85 e5       	ldi	r24, 0x55	; 85
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	fc 01       	movw	r30, r24
    14e6:	10 82       	st	Z, r1
	CLKPR=(1<<CLKPCE);
    14e8:	81 e6       	ldi	r24, 0x61	; 97
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	20 e8       	ldi	r18, 0x80	; 128
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 83       	st	Z, r18
	CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
    14f2:	81 e6       	ldi	r24, 0x61	; 97
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	fc 01       	movw	r30, r24
    14f8:	10 82       	st	Z, r1
}
    14fa:	00 00       	nop
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <init_timers>:

 #include "includes.h"

 volatile uint32_t m_delay = 0;

 void init_timers(){
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
		//----------Timer0 init----------//
		TCCR0A = (0 << COM0A1)|(0 << COM0A0)|(0 << COM0B1)|(0 << COM0B0)|(1 << WGM01)|(0 << WGM00);
    150a:	84 e4       	ldi	r24, 0x44	; 68
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	22 e0       	ldi	r18, 0x02	; 2
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
		TCCR0B = (0 << FOC0A)|(0 << FOC0B)|(0 << WGM02)|(0 << CS02)|(1 << CS01)|(1 << CS00); //  clkI/O/64 (From prescaler); Ttimer0=(8MHz/64)^-1=8us  [p.109]
    1514:	85 e4       	ldi	r24, 0x45	; 69
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	23 e0       	ldi	r18, 0x03	; 3
    151a:	fc 01       	movw	r30, r24
    151c:	20 83       	st	Z, r18
		OCR0A = 62*2; // 62*Ttimer0=0.496ms
    151e:	87 e4       	ldi	r24, 0x47	; 71
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	2c e7       	ldi	r18, 0x7C	; 124
    1524:	fc 01       	movw	r30, r24
    1526:	20 83       	st	Z, r18
		TIMSK0 = (0 << OCIE0B)|(1 << OCIE0A)|(0 << TOIE0);
    1528:	8e e6       	ldi	r24, 0x6E	; 110
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	22 e0       	ldi	r18, 0x02	; 2
    152e:	fc 01       	movw	r30, r24
    1530:	20 83       	st	Z, r18
		//----------Timer2 init----------//
		TCCR2A = (0 << COM2A1)|(0 << COM2A0)|(0 << COM2B1)|(0 << COM2B0)|(1 << WGM21)|(0 << WGM20);
    1532:	80 eb       	ldi	r24, 0xB0	; 176
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	22 e0       	ldi	r18, 0x02	; 2
    1538:	fc 01       	movw	r30, r24
    153a:	20 83       	st	Z, r18
		TCCR2B = (0 << FOC2A)|(0 << FOC2B)|(0 << WGM22)|(0 << CS22)|(1 << CS21)|(0 << CS20); // clkT2S/8 (From prescaler); Ttimer2=(8MHz/8)^-1=1us [p.158]
    153c:	81 eb       	ldi	r24, 0xB1	; 177
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	22 e0       	ldi	r18, 0x02	; 2
    1542:	fc 01       	movw	r30, r24
    1544:	20 83       	st	Z, r18
		OCR2A = 80; // 80*Ttimer2=80us;
    1546:	83 eb       	ldi	r24, 0xB3	; 179
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	20 e5       	ldi	r18, 0x50	; 80
    154c:	fc 01       	movw	r30, r24
    154e:	20 83       	st	Z, r18
		TIMSK2 = (0 << OCIE2B)|(1 << OCIE2A)|(0 << TOIE2);
    1550:	80 e7       	ldi	r24, 0x70	; 112
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	22 e0       	ldi	r18, 0x02	; 2
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18
 }
    155a:	00 00       	nop
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret

00001562 <__vector_14>:

 ISR (TIMER0_COMPA_vect){
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	2f 93       	push	r18
    1570:	3f 93       	push	r19
    1572:	4f 93       	push	r20
    1574:	5f 93       	push	r21
    1576:	6f 93       	push	r22
    1578:	7f 93       	push	r23
    157a:	8f 93       	push	r24
    157c:	9f 93       	push	r25
    157e:	af 93       	push	r26
    1580:	bf 93       	push	r27
    1582:	ef 93       	push	r30
    1584:	ff 93       	push	r31
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
		if(m_delay != 0)
    158e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <m_delay>
    1592:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <m_delay+0x1>
    1596:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <m_delay+0x2>
    159a:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <m_delay+0x3>
    159e:	89 2b       	or	r24, r25
    15a0:	8a 2b       	or	r24, r26
    15a2:	8b 2b       	or	r24, r27
    15a4:	99 f0       	breq	.+38     	; 0x15cc <__vector_14+0x6a>
			m_delay--;
    15a6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <m_delay>
    15aa:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <m_delay+0x1>
    15ae:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <m_delay+0x2>
    15b2:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <m_delay+0x3>
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	a1 09       	sbc	r26, r1
    15ba:	b1 09       	sbc	r27, r1
    15bc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <m_delay>
    15c0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <m_delay+0x1>
    15c4:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <m_delay+0x2>
    15c8:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <m_delay+0x3>
		lift_isr_routine();
    15cc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <lift_isr_routine>
		disk_isr_working_cycle();
    15d0:	0e 94 4d 02 	call	0x49a	; 0x49a <disk_isr_working_cycle>
 }
    15d4:	00 00       	nop
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    15f8:	0f 90       	pop	r0
    15fa:	1f 90       	pop	r1
    15fc:	18 95       	reti

000015fe <m_delay_ms>:

 void m_delay_ms(uint32_t t)
 {
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	00 d0       	rcall	.+0      	; 0x1604 <m_delay_ms+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <m_delay_ms+0x8>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	69 83       	std	Y+1, r22	; 0x01
    160c:	7a 83       	std	Y+2, r23	; 0x02
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	9c 83       	std	Y+4, r25	; 0x04
	m_delay = t;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	ab 81       	ldd	r26, Y+3	; 0x03
    1618:	bc 81       	ldd	r27, Y+4	; 0x04
    161a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <m_delay>
    161e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <m_delay+0x1>
    1622:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <m_delay+0x2>
    1626:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <m_delay+0x3>
	while(true)
		if(m_delay == 0)
    162a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <m_delay>
    162e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <m_delay+0x1>
    1632:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <m_delay+0x2>
    1636:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <m_delay+0x3>
    163a:	89 2b       	or	r24, r25
    163c:	8a 2b       	or	r24, r26
    163e:	8b 2b       	or	r24, r27
    1640:	09 f0       	breq	.+2      	; 0x1644 <m_delay_ms+0x46>
			return;
 }
    1642:	f3 cf       	rjmp	.-26     	; 0x162a <m_delay_ms+0x2c>
 void m_delay_ms(uint32_t t)
 {
	m_delay = t;
	while(true)
		if(m_delay == 0)
			return;
    1644:	00 00       	nop
 }
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <__vector_7>:

ISR (TIMER2_COMPA_vect){
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	disk_isr_update_motor_pwm();
    1680:	0e 94 e6 03 	call	0x7cc	; 0x7cc <disk_isr_update_motor_pwm>
	disk_isr_update_led_sync_pwm();
    1684:	0e 94 54 04 	call	0x8a8	; 0x8a8 <disk_isr_update_led_sync_pwm>
	disk_isr_update_led_data_pwm();
    1688:	0e 94 c2 04 	call	0x984	; 0x984 <disk_isr_update_led_data_pwm>
	cell_isr_routine();
    168c:	0e 94 a8 00 	call	0x150	; 0x150 <cell_isr_routine>
    1690:	00 00       	nop
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__tablejump2__>:
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	05 90       	lpm	r0, Z+
    16c0:	f4 91       	lpm	r31, Z
    16c2:	e0 2d       	mov	r30, r0
    16c4:	09 94       	ijmp

000016c6 <memcpy>:
    16c6:	fb 01       	movw	r30, r22
    16c8:	dc 01       	movw	r26, r24
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <memcpy+0xa>
    16cc:	01 90       	ld	r0, Z+
    16ce:	0d 92       	st	X+, r0
    16d0:	41 50       	subi	r20, 0x01	; 1
    16d2:	50 40       	sbci	r21, 0x00	; 0
    16d4:	d8 f7       	brcc	.-10     	; 0x16cc <memcpy+0x6>
    16d6:	08 95       	ret

000016d8 <memset>:
    16d8:	dc 01       	movw	r26, r24
    16da:	01 c0       	rjmp	.+2      	; 0x16de <memset+0x6>
    16dc:	6d 93       	st	X+, r22
    16de:	41 50       	subi	r20, 0x01	; 1
    16e0:	50 40       	sbci	r21, 0x00	; 0
    16e2:	e0 f7       	brcc	.-8      	; 0x16dc <memset+0x4>
    16e4:	08 95       	ret

000016e6 <strcpy>:
    16e6:	fb 01       	movw	r30, r22
    16e8:	dc 01       	movw	r26, r24
    16ea:	01 90       	ld	r0, Z+
    16ec:	0d 92       	st	X+, r0
    16ee:	00 20       	and	r0, r0
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <strcpy+0x4>
    16f2:	08 95       	ret

000016f4 <_exit>:
    16f4:	f8 94       	cli

000016f6 <__stop_program>:
    16f6:	ff cf       	rjmp	.-2      	; 0x16f6 <__stop_program>
